<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Seven Story Rabbit Hole]]></title>
  <link href="http://tleyden.github.io/atom.xml" rel="self"/>
  <link href="http://tleyden.github.io/"/>
  <updated>2014-05-23T09:47:43-07:00</updated>
  <id>http://tleyden.github.io/</id>
  <author>
    <name><![CDATA[Traun Leyden]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Configure Emacs as a Go editor from scratch]]></title>
    <link href="http://tleyden.github.io/blog/2014/05/22/configure-emacs-as-a-go-editor-from-scratch/"/>
    <updated>2014-05-22T16:46:00-07:00</updated>
    <id>http://tleyden.github.io/blog/2014/05/22/configure-emacs-as-a-go-editor-from-scratch</id>
    <content type="html"><![CDATA[<p>This explains the steps to get a productive Emacs environment for Go programming on OSX, starting from scratch.</p>

<h2>Install Emacs</h2>

<p>I recommend using the emacs from <a href="http://emacsformacosx.com">emacsformacosx.com</a>.</p>

<p>It has a GUI installer so I won&rsquo;t say much more about it.</p>

<h2>Install Go</h2>

<ul>
<li>At the time of writing, I installed <a href="https://storage.googleapis.com/golang/go1.2.2.darwin-amd64-osx10.8.pkg">https://storage.googleapis.com/golang/go1.2.2.darwin-amd64-osx10.8.pkg</a></li>
<li>After installing the package, you&rsquo;ll want to define the following environment variables in your <code>~/.bash_profile</code>:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export PATH=$PATH:/usr/local/go/bin
</span><span class='line'>export GOPATH=~/Development/gocode</span></code></pre></td></tr></table></div></figure>


<h2>Configure go-mode</h2>

<p>Go-mode is an Emacs major mode for editing Go code.  An absolute must for anyone writing Go w/ Emacs.</p>

<p>The following is a brief summary of <a href="http://dominik.honnef.co/posts/2013/03/writing_go_in_emacs/">Dominik Honnef&rsquo;s instructions</a></p>

<ul>
<li><code>mkdir -p ~/Misc/emacs &amp;&amp; cd ~/Misc/emacs</code></li>
<li><code>git clone git@github.com:dominikh/go-mode.el.git</code></li>
<li>From within Emacs, run <code>M-x update-file-autoloads</code>, point it at the <strong>go-mode.el</strong> file in the cloned directory.</li>
<li>Emacs will prompt you for a result file, and you should enter <strong>go-mode-load.el</strong></li>
<li>Add these two lines to your ~/.emacs</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(add-to-list 'load-path "~/Misc/emacs/go-mode.el/")
</span><span class='line'>(require 'go-mode-load)</span></code></pre></td></tr></table></div></figure>


<p>Restart Emacs and open a .go file, you should see the mode as &ldquo;Go&rdquo; rather than &ldquo;Fundamental&rdquo;.</p>

<h2>Update Emacs config for <code>godoc</code></h2>

<p>It&rsquo;s really useful to be able to able to pull up 3rd party or standard library docs from within Emacs using the <code>godoc</code> tool.</p>

<p><em>Unfortunately, it was necessary to duplicate the $PATH and $GOPATH environment variables in the .emacs file, so that the GUI Emacs app can see it.  If you know of a better way, please leave a comment.</em></p>

<p><strong>NOTE</strong>: you will need to modify the snippet below to reflect the $PATH and $GOPATH variables, don&rsquo;t just blindly copy and paste these.</p>

<ul>
<li>Add your $PATH and $GOPATH to your ~/.emacs</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(setenv "PATH" "/Users/tleyden/.rbenv/shims:/Users/tleyden/.rbenv/shims:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/local/go/bin")
</span><span class='line'>(setenv "GOPATH" "/Users/tleyden/Development/gocode")</span></code></pre></td></tr></table></div></figure>


<p>After doing this step, you should be able to run <code>M-x godoc</code> and it should be able to autocomplete paths of packages.  (of course, you may want to <code>go get</code> some packages first if you don&rsquo;t have any)</p>

<h2>Automatically call gofmt on save</h2>

<p><code>gofmt</code> reformats code into the One True Go Style Coding Standard.  You&rsquo;ll want to call it every time you save a file.</p>

<p>Add these to your ~/.emacs:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(setq exec-path (cons "/usr/local/go/bin" exec-path))
</span><span class='line'>(add-to-list 'exec-path "/Users/tleyden/Development/gocode/bin")
</span><span class='line'>(add-hook 'before-save-hook 'gofmt-before-save)</span></code></pre></td></tr></table></div></figure>


<p>After this step, whenever you save a Go file, it will automatically reformat the file with <code>gofmt</code>.</p>

<h2>Godef</h2>

<p>Godef is essential: it lets you quickly jump around the code, as you might be used to with a full featured IDE.</p>

<p>From what I can tell, installing <a href="https://github.com/dominikh/go-mode.el">go-mode</a> seems to automatically install godef.</p>

<p>To verify that godef is indeed installed:</p>

<ul>
<li>Putting the cursor over a method name</li>
<li>Try doing <code>M-x godef-jump</code> to jump into the method, and <code>M-*</code> to go back.</li>
</ul>


<p>In order to add godef key bindings, add these to your ~/.emacs:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(defun my-go-mode-hook ()
</span><span class='line'>  ; Call Gofmt before saving                                                    
</span><span class='line'>  (add-hook 'before-save-hook 'gofmt-before-save)
</span><span class='line'>  ; Godef jump key binding                                                      
</span><span class='line'>  (local-set-key (kbd "M-.") 'godef-jump))
</span><span class='line'>(add-hook 'go-mode-hook 'my-go-mode-hook)</span></code></pre></td></tr></table></div></figure>


<p>and remove your previous call to <code>(add-hook 'before-save-hook 'gofmt-before-save)</code> since it&rsquo;s now redundant</p>

<p>Now you can jump into code with <code>M-.</code> and jump back with <code>M-*</code></p>

<h2>Autocomplete</h2>

<p>The following is a brief summary of the <a href="http://cx4a.org/software/auto-complete/manual.html#Installation">emacs autocomplete manual</a></p>

<ul>
<li>Download and extract <a href="http://cx4a.org/pub/auto-complete/auto-complete-1.3.1.tar.bz2">http://cx4a.org/pub/auto-complete/auto-complete-1.3.1.tar.bz2</a></li>
<li>Cd into extracted dir and run <code>emacs -batch -l etc/install.el</code></li>
<li>It will tell you to add the following to your ~/.emacs:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(add-to-list 'load-path "/Users/tleyden/.emacs.d/")
</span><span class='line'>(require 'auto-complete-config)
</span><span class='line'>(add-to-list 'ac-dictionary-directories "/Users/tleyden/.emacs.d//ac-dict")
</span><span class='line'>(ac-config-default)</span></code></pre></td></tr></table></div></figure>


<p>To see any effect, we need to install gocode in the next step.</p>

<h2>Gocode: Go aware Autocomplete</h2>

<p>The following is a brief summary of the <a href="https://github.com/nsf/gocode">gocode README</a></p>

<ul>
<li><code>go get -u -v github.com/nsf/gocode</code></li>
<li><code>cp /Users/tleyden/Development/gocode/src/github.com/nsf/gocode/emacs/go-autocomplete.el ~/.emacs.d/</code></li>
<li>Add the following to your ~/.emacs</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(require 'go-autocomplete)
</span><span class='line'>(require 'auto-complete-config)</span></code></pre></td></tr></table></div></figure>


<p>At this point, after you restart emacs, when you start typing something, you should see a popup menu with choices, like <a href="http://tleyden-misc.s3.amazonaws.com/blog_images/emacs_autocomplete.png">this screenshot</a>.</p>

<h2>Is this too easy for you?</h2>

<p>If you&rsquo;re yawning and you already know all this stuff, or your ready to take it to the next level, check out <a href="http://www.youtube.com/watch?v=5wipWZKvNSo">5 minutes of go in emacs</a></p>

<h2>To be continued ..</h2>

<p>There&rsquo;s actually a bunch of other stuff I still need to add here (like Go Oracle and that thing that automatically manages go imports).  Check back in a while.</p>

<p>Thanks <a href="https://twitter.com/dlsspy">@dlsspy</a> for taking the time to teach me the Emacs wrestling techniques needed to get this far.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What is Couchbase Mobile and why should you care?]]></title>
    <link href="http://tleyden.github.io/blog/2014/05/21/what-is-couchbase-mobile-and-why-should-you-care/"/>
    <updated>2014-05-21T13:57:00-07:00</updated>
    <id>http://tleyden.github.io/blog/2014/05/21/what-is-couchbase-mobile-and-why-should-you-care</id>
    <content type="html"><![CDATA[<p>Couchbase Mobile just announced it&rsquo;s <a href="http://www.couchbase.com/press-releases/couchbase-mobile-enables-new-breed-network-independent-mobile-applications">1.0 release</a> today.</p>

<p>What is Couchbase Mobile?</p>

<ul>
<li>Couchbase Lite is an open source iOS/Android NoSQL DB with built-in sync capability.</li>
<li>Couchbase Mobile refers to the &ldquo;full stack&rdquo; solution, which includes the (also open source) server components that Couchbase Lite uses for sync.</li>
</ul>


<p>To give a deeper look at what problem Couchbase Mobile is meant to solve, let me tell you the story of how I came to discover Couchbase Lite as a developer.  In my <a href="http://techcrunch.com/2012/01/26/signature-launches-to-bring-a-personalized-mobile-shopping-service-to-brick-and-mortar-retailers/">previous startup</a>, we built a mobile CRM app for sales associates.</p>

<p>The very first pilot release of the app, the initial architecture was:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/architecture_1.png" alt="screenshot" /></p>

<p>It was very simple, and the server was almost the Single Point of Truth, except for our JSON caching layer which had a very short expiry time before it would refetch from the server.  The biggest downside to this architecture was that <em>it only worked well when the device had a fast connection to the internet</em>.</p>

<p>But there was another problem: getting updates to sync across devices in a timely manner.   When sales associate #1 would update a customer, sales associate #2 wouldn&rsquo;t see the change because:</p>

<ul>
<li>How does the app for sales associate #2 know it needs to &ldquo;re-sync&rdquo; the data?</li>
<li>How will the app know that something changed on the backend that should cause it to invalidate that locally cached data?</li>
</ul>


<p>We realized that the data sync between the devices was going to be a huge issue going forward, and so we decided to change our architecture to something like this:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/architecture_2.png" alt="screenshot" /></p>

<p>So the app would be displaying what&rsquo;s stored in the Core Data datastore, and we&rsquo;d build a <em>sync engine</em> component that would shuttle data bidirectionally between Core Data and the backend server.</p>

<p>That seemed like a fine idea on paper, except that I refused to build it.  I knew it would take way too long to build, and once it was built it probably would entail endless debugging and tuning.</p>

<p>Instead, after some intense debate we embarked on a furious sprint to convert everything over to <a href="https://github.com/couchbase/couchbase-lite-ios">Couchbase Lite iOS</a>.  We ended up with an architecture like this:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/architecture%203.png" alt="screenshot" /></p>

<p>It was similar in spirit to our original plans, except <strong>we didn&rsquo;t have to build any of the hard stuff</strong> &mdash; the storage engine and the sync was already taken care of for us by Couchbase Lite.</p>

<p>(<em>note</em>: there were also components that listened for changes to the backend server database and fired off emails and push notifications, but I&rsquo;m not showing them here)</p>

<p>After the conversion ..</p>

<p><strong>On the upside</strong></p>

<ul>
<li>Any updates to customer data would quickly sync across all devices.</li>
<li>Our app still worked even when the device was completely offline.</li>
<li>Our app was orders of magnituted faster in &ldquo;barely connected&rdquo; scenarios, because Couchbase Lite <em>takes the network out of the critical path</em>.</li>
<li>Our data was now &ldquo;document oriented&rdquo;, and so we could worry less about rolling out schema changes while having several different versions of our app out in the wild.</li>
</ul>


<p><strong>On the downside</strong></p>

<ul>
<li>We ran into a few bizarre situations where a client app would <em>regurgitate</em> a ton of unwanted data back into the system after we&rsquo;d thought we&rsquo;d removed it.  To be fair, that was our fault, but I mention it because Couchbase Lite can throw you some curve balls if you aren&rsquo;t paying attention.</li>
<li>Certain things were awkward.  For example for our initial login experience, we had to sync the data before the sales associate could login.  We ended up re-working that to have the login go directly against the server, which meant that logging in required the user to be online.</li>
<li>When things went wrong, they were a bit complicated to debug.  (but because Couchbase Lite is Open Source, we could diagnose and fix bugs ourselves, which was a huge win.)</li>
</ul>


<h1>So what can Couchbase Lite do for you?</h1>

<h2>Sync Engine included, so you don&rsquo;t have to build one</h2>

<p>If I had to sum up one quick elevator pitch of Couchbase Lite, it would be:</p>

<blockquote><p>If you find that you&rsquo;re building a &ldquo;sync engine&rdquo; to sync data from your app to other instances of your app and/or the cloud, then you should probably be building it on top of Couchbase Lite instead of going down that rabbit hole &mdash; since you may never make it back out.</p></blockquote>

<h2>Your app now works well in offline or occasionally connected scenarios</h2>

<p>This is something that users expect your app to handle.  For example, if I&rsquo;m on the BART going from SF &ndash;> Oakland and have no signal, I should still be able to read my tweets, and even send new tweets that will be queued to sync once the device comes back online.</p>

<p>If your app is based on Couchbase Lite, you essentially get these features for free.</p>

<ul>
<li>When you load tweets, it is loaded from the local Couchbase Lite store, without any need to hit the server.</li>
<li>When you create a new tweet, you just save it to Couchbase Lite, and let it handle the heavy lifting of getting that pushed up to the server once the device is back online.</li>
</ul>


<h2>Your data model is now Document Oriented</h2>

<p>This is a double edged sword, and to be perfectly honest a Document Oriented approach is not always the ideal data model for every application.  However, for some applications (like CRM), it&rsquo;s a much more natural fit than the relational model.</p>

<p>And you&rsquo;ll never have to worry about getting yourself stuck in Core Data schema migration hell.</p>

<h1>What&rsquo;s the dark side of Couchbase Lite?</h1>

<h2>Queries can be faster, but they have certain limitations</h2>

<p>With SQL, you can run arbitrary queries, irregardless if there is an index or not.</p>

<p>Couchbase Lite cannot be queried with SQL.  Instead you must define <em>Views</em>, which are essentially indexes, and run queries on those views.  Views are extremely fast and efficient, but if you don&rsquo;t have a view, you can&rsquo;t run a query, period.</p>

<p>For people who are used to SQL, defining lower level map/reduce views takes some time to wrap your head around.</p>

<h2>Complex queries can get downright awkward</h2>

<p>Views are powerful, but they have their limitations, and if your query is complex enough, you may end up needing to write multiple views and coalescing/sorting the data in memory.</p>

<h2>It&rsquo;s not a black box, but it <em>is</em> complicated.</h2>

<p>The replication code in Couchbase Lite is complicated.  I know, because I&rsquo;ve spent a better part of the last year staring at it.</p>

<p>As an app developer, you are putting your trust that the replication will work as you would expect and that it will be performant and easy on the battery.</p>

<p><strong>The good news</strong> is that it&rsquo;s 100% open source under the Apache 2 license.  So you can debug into it, send issues and pull requests to our <a href="https://github.com/couchbase/couchbase-lite-android">github repo</a>, and even maintain your own fork if needed.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A successful git branching model with enterprise support]]></title>
    <link href="http://tleyden.github.io/blog/2014/04/09/a-successful-git-branching-model-with-enterprise-support/"/>
    <updated>2014-04-09T11:39:00-07:00</updated>
    <id>http://tleyden.github.io/blog/2014/04/09/a-successful-git-branching-model-with-enterprise-support</id>
    <content type="html"><![CDATA[<p>This further extends <a href="http://tleyden.github.io/blog/2014/03/18/a-slight-tweak-on-a-successful-git-branching-model/">A Slight Tweak on a Successful Git Branching Model</a> with the addition of the concept of support branches.</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/release-branching-strategy.png" alt="diagram" /></p>

<h2>Release Branches</h2>

<ul>
<li><p>When completed the release branch would be merged into both the master and stable branches, the commit on the stable branch would be tagged with a release tag (eg, 1.0.0).</p></li>
<li><p>The release branch would be discarded after being merged back into master and stable.</p></li>
<li><p>Release branches would be named “release/xxx”, where xxx is the target release tag for that release.  Eg, “release/1.0.0”.</p></li>
<li><p>Release branches should only have bugfixes related to the release being committed to them.  All other changes should be on feature branches or the master branch, isolated from the release process.</p></li>
<li><p>Release branches would help avoid making developers having to “double-commit” bugfixes related to a release to both the release branch and the master branch &mdash; because the release branch will be merged into master at the time of release, they only need to commit the fix to the release branch.</p></li>
<li><p>Release branches should be periodically merged back into the master branch if they run longer than normal (eg, if it was expected to last 3 weeks and ended up lasting 8 weeks), rather than waiting until the time of release.  This will reduce the chance of having major merge conflicts trying to merge back into master.</p></li>
<li><p>When a release is ready to be tagged, if the release branch does not easily merge into master, it is up to the dev lead on that team to handle the merge (not the build engineer).  In this case, the build engineer should not be blocked, because the merge into stable will be a fast-forward merge, and so the release can proceed despite not having been merged into master yet.</p></li>
</ul>


<h2>Support Branches</h2>

<ul>
<li><p>Support branches would be created “on demand” when requested by customers who are stuck on legacy releases and are not able to move forward to current releases, but need security and other bug fixes.</p></li>
<li><p>Support branches should be avoided if possible, by encouraging customers to move to the current release, because they create extra work for the entire team.</p></li>
<li><p>Support branches would follow a similar naming scheme and would be named “support/xxx”, where xxx is the release tag from which they were branched off of.  Eg, “support/1.0.1”.</p></li>
<li><p>Support branches are essentially dead-end branches, since their changes would unlikely need to be merged back into master (or stable) as the support branch contains “ancient code” and most likely those fixes would already have been integrated into the codebase.</p></li>
<li><p>If a customer is on the current release, then there is no need to create a support branch for their required fix.  Instead, a hotfix branch should be used and a new release tag should be created.</p></li>
</ul>


<h2>Hotfix Branches</h2>

<ul>
<li><p>Hotfix branches would branch off of the stable branch, and be used for minor post-release bugfixes.</p></li>
<li><p>Hotfix branches would be named “hotfix/xxx”, where xxx might typically be an issue id.  Once their changes have been merged into master and stable, they should be deleted.</p></li>
<li><p>Hotfix branches are expected to undergo less QA compared to release branches, and therefore are expected to contain minimum changes to fix showstopper bugs in a release.   The changes should not include refactoring or any other risky changes.</p></li>
<li><p>If it’s being branched off the master branch, it’s not a hotfix branch.  Hotfixes are only branched off the stable branch.</p></li>
<li><p>Hotfix branches should verified on the CI server using the automated QA suite before being considered complete.</p></li>
<li><p>After being accepted by QA, hotfix branches are merged back into master and stable, and the latest commit on stable is tagged with a release tag.  (eg, 1.0.1)</p></li>
<li><p>Similar to release branches, if hotfixes do not easily merge back into master, the build engineer would assign the dev lead the responsibility for completing the merge, but this should not block the release.  However since hotfix branches are so short-lived, this is very unlikely to happen.</p></li>
</ul>


<h2>Stable Branch</h2>

<ul>
<li><p>The stable branch would represent the “released” mainline development.</p></li>
<li><p>The latest commit on stable should always correspond to the latest release tag.</p></li>
<li><p>All release tags should be made against commits on stable, except for those on legacy support branches.</p></li>
<li><p>Developers who wanted to subscribe to the latest released code would follow the stable branch.</p></li>
</ul>


<h2>Master Branch</h2>

<ul>
<li>The master branch would represent the “as-yet-unreleased” mainline development.</li>
</ul>


<h2>Feature Branches</h2>

<ul>
<li>All non-trivial changes should be done on feature branches and undergo code review before being merged into the master branch.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A slight tweak on A Successful Git Branching Model]]></title>
    <link href="http://tleyden.github.io/blog/2014/03/18/a-slight-tweak-on-a-successful-git-branching-model/"/>
    <updated>2014-03-18T10:32:00-07:00</updated>
    <id>http://tleyden.github.io/blog/2014/03/18/a-slight-tweak-on-a-successful-git-branching-model</id>
    <content type="html"><![CDATA[<p>A great &ldquo;best practices&rdquo; for juggling git branches in a release cycle is <a href="http://nvie.com/posts/a-successful-git-branching-model/">A successful git branching model</a>.  It is also accompanied with a tool called <a href="https://github.com/nvie/gitflow">git flow</a> that makes it easy to implement in practice.</p>

<p>It does however have one major issue: many people use a different naming scheme.</p>

<p>Instead of:</p>

<ul>
<li><strong>Master</strong> &ndash; the latest &ldquo;stable&rdquo; branch</li>
<li><strong>Development</strong> &ndash; bleeding edge development branch</li>
</ul>


<p>a slightly more common naming pattern is:</p>

<ul>
<li><strong>Master</strong> &ndash; bleeding edge development branch</li>
<li><strong>Stable</strong> &ndash; the latest &ldquo;stable&rdquo; branch</li>
</ul>


<p>To that end, I&rsquo;ve tweaked the original diagram to be.</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/proposed_couchbaselite_branchingmodel.png" alt="diagram" /></p>

<h2>Every branch solves a problem</h2>

<p>The natural reaction to most people seeing this diagram is <em>dude, that&rsquo;s way too many branches, this is way more complicated than it needs to be</em>.  Actually, I&rsquo;d argue that it&rsquo;s minimally complex to solve the problems that these branches are designed to solve.  In other words, each type of branch justifies it&rsquo;s existence by the problem it&rsquo;s designed to solve.</p>

<p>From the perspective of a library developer (in my case, <a href="https://github.com/couchbase/couchbase-lite-android">Couchbase Lite for Android</a>), here are the problems each branch is intended to solve.</p>

<h3>Permanent and External Facing Branches</h3>

<p><em>These branches are permanent, in the sense they have a continuous lifetime.  They are also external, and consumers of the library would typically depend on one or both of these branches</em></p>

<p><strong>Master</strong></p>

<ul>
<li>A home for the latest &ldquo;feature complete&rdquo; / reviewed code.</li>
<li>Anyone internal or external who wants to stay up to date with latest project developments needs this branch.</li>
</ul>


<p><strong>Stable</strong></p>

<ul>
<li>A home for the code that corresponds to the latest tagged release.</li>
<li>This branch would be the basis for post-release bugfixes, eg an external developer who finds a bug in the latest release would send a pull request against this branch.</li>
<li>Developers depending on this code directly in their app would likely point to this branch on their own stable branch.</li>
</ul>


<h3>Ephemeral and Internal Only Branches</h3>

<p><em>These branches are emphemeral in nature, and are thrown away once they are no longer useful.  Developers consuming the library would typically ignore these</em></p>

<p><strong>FeatureX</strong></p>

<ul>
<li>A place for in progress features to live without de-stabilizing the master branch.  Can be many of these.</li>
</ul>


<p><strong>Hotfix</strong></p>

<ul>
<li>An in progress fix would go here, where that fix is destined to be merged back into latest stable but not part of a new release that is branched off of master.</li>
<li>While this hotfix is in progress, since these commits are not part of a tagged release, they cannot go on stable (yet), otherwise it would be a violation of the stable branch contract that says that stable reflects the latest tagged release.</li>
<li>They could go directly on a &ldquo;local stable&rdquo; branch, which is only on the developers workstation, but that prevents sharing the branch or running CI unit tests against it, so it&rsquo;s not a good solution.</li>
<li>NOTE: when hotfix merged, new release tagged simultaneously with a merge to stable, so the stable branch contract stays satisfied.</li>
</ul>


<p><strong>Release</strong></p>

<ul>
<li>During QA release process, need a place to QA and apply bugfixes, while isolated from destabilizing changes such as merging feature branches.</li>
<li>Release branch allows feature branch merging to happen concurrently on master branch, which is especially crucial if release gets delayed.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Playing with Go and OpenGL]]></title>
    <link href="http://tleyden.github.io/blog/2014/02/08/playing-with-go-and-opengl/"/>
    <updated>2014-02-08T16:01:00-08:00</updated>
    <id>http://tleyden.github.io/blog/2014/02/08/playing-with-go-and-opengl</id>
    <content type="html"><![CDATA[<p>Get this spinning gopher working with Go and OpenGL on OSX Mavericks via <a href="https://github.com/chsc/gogl/">gogl</a></p>

<iframe width="420" height="315" src="http://tleyden.github.io//www.youtube.com/embed/yae-bRLdfaU" frameborder="0" allowfullscreen></iframe>


<h1>Steps</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ brew install glfw2
</span><span class='line'>$ go get -u -v github.com/tleyden/gogl
</span><span class='line'>$ go get -u -v github.com/go-gl/glfw  
</span><span class='line'>$ cd $GOPATH/src/github.com/tleyden/gogl
</span><span class='line'>$ make bindings
</span><span class='line'>$ go get -u -v github.com/chsc/gogl
</span><span class='line'>$ cd $GOPATH/src/github.com/tleyden/gogl/examples/gopher
</span><span class='line'>$ go run gopher.go</span></code></pre></td></tr></table></div></figure>


<p>NOTE: if <a href="https://github.com/chsc/gogl/pull/37">pull request #37</a> has already been merged into <a href="https://github.com/chsc/gogl/">gogl</a>, then replace <code>github.com/tleyden/gogl</code> with <code>https://github.com/chsc/gogl</code> in steps above.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why use Go when you can just use C++?]]></title>
    <link href="http://tleyden.github.io/blog/2014/02/06/why-use-go-when-you-can-just-use-c-plus-plus/"/>
    <updated>2014-02-06T08:25:00-08:00</updated>
    <id>http://tleyden.github.io/blog/2014/02/06/why-use-go-when-you-can-just-use-c-plus-plus</id>
    <content type="html"><![CDATA[<p>I recently saw this on a mailing list:</p>

<blockquote><p>What are the advantages of Go against C++ or other languages?</p></blockquote>

<h1>Go has sane concurrency.</h1>

<p>In C++ the main tool to deal with concurrency is pthreads, but making threaded programming correct is extremely difficult and error prone.  Trying to make it performant by minimizing locking makes it even more challenging.</p>

<p>Go, OTOH, has a concept of goroutines and channels for concurrency.  The idea has its roots in CSP (communicating sequential processing), and is not unlike Erlang&rsquo;s style of having processes that communicating by message passing.</p>

<p>In Go, instead of having threads communicating by sharing memory (and locking), goroutines share memory by communicating over channels.  Eg, concurrent goroutines communicate over channels, and each goroutine&rsquo;s internal state is private to that goroutine.  Also, concurrency and their constructs like channels are built right into the Go language, which affords many advantages over languages that have had concurrency slapped on as an afterthought.</p>

<h1>Other Strengths</h1>

<ul>
<li>No unsafe pointer arithmetic.</li>
<li>Array bound checking</li>
<li>Write once run anywhere</li>
<li>Closures (eg, lambdas)</li>
<li>Functions are first class objects</li>
<li>Multiple return values</li>
<li>Does not have IFDEF&rsquo;s, so no IFDEF hell and unmaintainable code.</li>
<li>Compiles blazingly fast</li>
<li>Gofmt &ndash; All code is uniformly formatted, making codebases much easier to read.  (a la Python)</li>
<li>Garbage collection</li>
</ul>


<h1>Weaknesses</h1>

<ul>
<li>Lack of generics</li>
<li>Not quite as fast as C/C++ (partly due to GC overhead)</li>
<li>Integration with existing native code is a bit limited (you can&rsquo;t build libraries in Go or link Go code into a C/C++ executable)</li>
<li>IDE support is limited compared to C/C++/Obj-C/Java</li>
<li>Doesn&rsquo;t work with regular debugging tools because it doesn&rsquo;t use normal calling conventions.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A stubbed out gradle multi-project hierarchy using git submodules]]></title>
    <link href="http://tleyden.github.io/blog/2014/01/31/a-stubbed-out-gradle-multi-project-hierarchy-using-git-submodules/"/>
    <updated>2014-01-31T10:50:00-08:00</updated>
    <id>http://tleyden.github.io/blog/2014/01/31/a-stubbed-out-gradle-multi-project-hierarchy-using-git-submodules</id>
    <content type="html"><![CDATA[<p>I&rsquo;m about to split up the <a href="https://github.com/couchbase/couchbase-lite-android">couchbase-lite</a> android library into two parts: a pure-java and an android specific library.  The android library will depend on the pure-java library.</p>

<p>Before going down this project refactoring rabbit hole for the real project, I decided to stub out a complete project hierarchy to validate that it was going to actually work.  (I&rsquo;m calling this project hierarchy &ldquo;stubworld&rdquo; for lack of a sillier name)</p>

<p>There are five projects in total, here are the two top-level projects</p>

<p><a href="https://github.com/tleyden/stubworld-app-android">https://github.com/tleyden/stubworld-app-android</a>  (an Android app)</p>

<p><img src="http://cl.ly/image/3O31321l0b0n/stubworld_architecture_android.png" alt="" /></p>

<p><a href="https://github.com/tleyden/stubworld-app-cmdline">https://github.com/tleyden/stubworld-app-cmdline</a>  (a pure java Command Line application)</p>

<p><img src="http://cl.ly/image/1M2C333S2s0u/stubworld_architecture_desktop.png" alt="" /></p>

<p>The projects are all self contained gradle projects and can be imported in either Android Studio or IntelliJ CE 13, and the dependencies on lower level projects are done via git submodules (and even git sub-submodules, <em>gulp</em>).   In either top level project you can easily debug and edit the code in the lower level projects, since they use source level dependencies.</p>

<p>The biggest sticking point I ran into was that initially I tried to include a dependency via:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>compile project(':libraries:stubworld-corelib-java')</span></code></pre></td></tr></table></div></figure>


<p>which totally broke when trying to embed this project into another parent project. The fix was to change it to use a relative path by removing the leading colon:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>compile project('libraries:stubworld-corelib-java')</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;m posting this in case it&rsquo;s useful to anyone who needs to do something similar, or if any Gradle / Android Studio Jedi masters have any feedback like &ldquo;why did you do X, when you just could have done Y?&rdquo;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective C coding interview challenge: URLPuller]]></title>
    <link href="http://tleyden.github.io/blog/2014/01/13/objective-c-coding-interview-challenge-urlpuller/"/>
    <updated>2014-01-13T11:45:00-08:00</updated>
    <id>http://tleyden.github.io/blog/2014/01/13/objective-c-coding-interview-challenge-urlpuller</id>
    <content type="html"><![CDATA[<h1>Programming Challenge</h1>

<p>The goal is to create an Objective-C class which takes an array of NSURL&rsquo;s, downloads their contents asynchronously, and writes the contents of each URL to a unique file.</p>

<p>The class should be named URLPuller and should have the following instance methods:</p>

<ul>
<li><code>- (void) downloadUrlsAsync: (NSArray*)urls</code></li>
<li><code>- (void) waitUntilAllDownloadsFinish</code></li>
<li><code>- (NSString*) downloadedPathForURL: (NSURL*)url</code></li>
</ul>


<p>Here are the detailed descriptions of each method:</p>

<h2>downloadUrlsAsync</h2>

<p><code>- (void) downloadUrlsAsync: (NSArray*)urls</code></p>

<p>The urls array will contain an array of NSURL&rsquo;s.  The method should return immediately, eg, it&rsquo;s an asynchronous API call that will run in the background.</p>

<p>The downloaded files can be stored in any directory, where the filename is {sha1 hash of url}.downloaded</p>

<h2>waitUntilAllDownloadsFinish</h2>

<p><code>- (void) waitUntilAllDownloadsFinish</code></p>

<p>Block until all of the URLs have been downloaded.</p>

<p>If this is called while there is no download in progress, it should return immediately.  Otherwise, it should block until all the downloads have finished.</p>

<h2>downloadedPathForURL</h2>

<p><code>- (NSString*) downloadedPathForURL: (NSURL*)url</code></p>

<p>Return the path where the given url was downloaded to.</p>

<p>If the given url has not been downloaded yet, or was never requested to be downloaded, then it should return nil.</p>

<h1>Objectives</h1>

<p>Demonstrate that:</p>

<ul>
<li>You can write a program that satisfies the API methods and described behavior.</li>
<li>You can write code that is well factored, and easy to understand.</li>
<li>You can clearly communicate questions (if any arise) regarding this specification.</li>
</ul>


<h1>Deliverable</h1>

<ul>
<li>Zipped Xcode project directory or a link to github repo that contains the Xcode project.  It can be either an iOS or MacOS project.</li>
</ul>


<h1>Rules</h1>

<ul>
<li>You can use any available resource you can find on the Internet &mdash; eg, Stack Overflow, API docs, etc.</li>
<li>You may not ask questions related to the problem on Stack Overflow, IRC, etc.  (eg, the Internet is &ldquo;read-only&rdquo;)</li>
<li>You cannot use any 3rd party libraries or products, you can only use classes and API&rsquo;s in the standard iOS/Cocoa Objective-C runtime.  If in doubt, just ask.</li>
<li>You are welcome to go above and beyond the call of duty in any way that you see fit, however with the constraint that you must provide the above methods with signatures exactly matching with the specification.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to downgrade Android Studio]]></title>
    <link href="http://tleyden.github.io/blog/2013/12/19/how-to-downgrade-android-studio/"/>
    <updated>2013-12-19T17:01:00-08:00</updated>
    <id>http://tleyden.github.io/blog/2013/12/19/how-to-downgrade-android-studio</id>
    <content type="html"><![CDATA[<p>I just tried to update to Android Studio 0.4, however was stung by <a href="https://code.google.com/p/android/issues/detail?id=61573#c14">Issue 61573: Gradle duplicate file exception when package apk file with jar dependencies that contains resources.</a></p>

<p>The good news is that it&rsquo;s very easy to downgrade!  Thank Google, because there is nothing more annoying than not being able to back out of an upgrade gone bad.</p>

<p>Here&rsquo;s how I did it on OSX Mavericks:</p>

<ul>
<li><p>Download 0.3.7 from <a href="http://tools.android.com/download/studio/canary/0-3-7">http://tools.android.com/download/studio/canary/0-3-7</a></p></li>
<li><p>Unzip it by double clicking it.</p></li>
<li><p>In a command line, run the following:</p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mv /Applications/Android\ Studio.app /tmp/
</span><span class='line'>$ mv ~/Downloads/Android\ Studio.app /Applications/
</span><span class='line'>$ cp -R /tmp/Android\ Studio.app/sdk /Applications/Android\ Studio.app/</span></code></pre></td></tr></table></div></figure>


<p>The last step is necessary because the dowloaded 0.3.7 Android Studio will not have an SDK directory.  (Note: at this point you can also use <code>mv</code> instead of <code>cp</code> if you don&rsquo;t want to use the extra disk space)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Understanding chan chan's in Go]]></title>
    <link href="http://tleyden.github.io/blog/2013/11/23/understanding-chan-chans-in-go/"/>
    <updated>2013-11-23T07:58:00-08:00</updated>
    <id>http://tleyden.github.io/blog/2013/11/23/understanding-chan-chans-in-go</id>
    <content type="html"><![CDATA[<p>A channel describes a transport of sorts.  You can send a thing down that transport.  When using a chan chan, the thing you want to send down the transport is another transport to send things back.</p>

<p>They are useful when you want to get a response to something, and you don&rsquo;t want to setup two channels (it&rsquo;s generally considered bad practice to have data moving bidirectionally on a single channel)</p>

<h2>Visual time lapse walkthrough</h2>

<p>Keep in mind that Goroutine C is the &ldquo;real consumer&rdquo; even though it will be the one which writes to the request channel.</p>

<p>The request channel starts out empty.</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/go_chan_chan_1.png" alt="Screenshot" /></p>

<p>Goroutine C passes a &ldquo;response channel&rdquo; to go routine D via the request channel</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/go_chan_chan_2.png" alt="Screenshot" /></p>

<p>Goroutine C starts reading from the (still empty) response channel.</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/go_chan_chan_3.png" alt="Screenshot" /></p>

<p>Goroutine D writes a string to the response channel</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/go_chan_chan_4.png" alt="Screenshot" /></p>

<p>Goroutine C now is able to read a value from response channel, and get&rsquo;s the &ldquo;wassup!&rdquo; message</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/go_chan_chan_5.png" alt="Screenshot" /></p>

<p>And now we are back to where we started</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/go_chan_chan_1.png" alt="Screenshot" /></p>

<h2>Here is some code that uses chan chan&rsquo;s</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package main
</span><span class='line'>
</span><span class='line'>import "fmt"
</span><span class='line'>import "time"
</span><span class='line'>
</span><span class='line'>func main() {
</span><span class='line'>
</span><span class='line'>     // make the request chan chan that both go-routines will be given
</span><span class='line'>     requestChan := make(chan chan string)
</span><span class='line'>
</span><span class='line'>     // start the goroutines
</span><span class='line'>     go goroutineC(requestChan)
</span><span class='line'>     go goroutineD(requestChan)
</span><span class='line'>
</span><span class='line'>     // sleep for a second to let the goroutines complete
</span><span class='line'>     time.Sleep(time.Second)
</span><span class='line'>
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>func goroutineC(requestChan chan chan string) {
</span><span class='line'>
</span><span class='line'>     // make a new response chan
</span><span class='line'>     responseChan := make(chan string)
</span><span class='line'>
</span><span class='line'>     // send the responseChan to goRoutineD
</span><span class='line'>     requestChan &lt;- responseChan
</span><span class='line'>
</span><span class='line'>     // read the response
</span><span class='line'>     response := &lt;-responseChan
</span><span class='line'>
</span><span class='line'>     fmt.Printf("Response: %v\n", response)
</span><span class='line'>
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>func goroutineD(requestChan chan chan string) {
</span><span class='line'>
</span><span class='line'>     // read the responseChan from the requestChan
</span><span class='line'>     responseChan := &lt;-requestChan
</span><span class='line'>
</span><span class='line'>     // send a value down the responseChan
</span><span class='line'>     responseChan &lt;- "wassup!"
</span><span class='line'>
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>This code can be run on <a href="http://play.golang.org/p/chi6P2XGTO">Go playground</a></p>

<h2>For more information</h2>

<p>See <a href="https://www.youtube.com/watch?v=QDDwwePbDtw">Google I/O 2013 &ndash; Advanced Go Concurrency Patterns</a> around 17:00.  This contains another explanation of chan chan&rsquo;s.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Studio + Genymotion Emulator]]></title>
    <link href="http://tleyden.github.io/blog/2013/11/22/android-studio-plus-genymotion-emulator/"/>
    <updated>2013-11-22T15:51:00-08:00</updated>
    <id>http://tleyden.github.io/blog/2013/11/22/android-studio-plus-genymotion-emulator</id>
    <content type="html"><![CDATA[<p>The Android emulator is dog slow.  The x86 intel emulators only work with certain versions of OSX, otherwise they crash miserably.</p>

<p>Genymotion is apparently pretty good, so I&rsquo;m giving that a shot.</p>

<p>Here&rsquo;s how to do it.</p>

<h2>Download and Install VirtualBox</h2>

<p><a href="https://www.virtualbox.org/wiki/Downloads">Download VirtualBox</a> + follow instructions to install.</p>

<h2>Signup with Genymotion + Download installer</h2>

<ul>
<li><p>Go to <a href="genymotion.com">genymotion.com</a> and signup</p></li>
<li><p>Click the &ldquo;Get Genymotion&rdquo; button and <a href="https://cloud.genymotion.com/page/launchpad/download/">download</a> the appropriate version for your OS.</p></li>
</ul>


<h2>Run the Genymotion application</h2>

<p>It will install Genymotion and Genmotion shell &mdash; run the Genymotion application (not the shell).</p>

<p>When you run it, you will see:</p>

<p><img src="http://cl.ly/image/0e1j3t1j1V3F/Screen%20Shot%202013-11-22%20at%203.57.11%20PM.png" alt="Screenshot" /></p>

<p>Click add new virtual device.  It will ask you to login, then show you a list:</p>

<p><img src="http://cl.ly/image/2i3M2D0p2M2J/Screen%20Shot%202013-11-22%20at%203.59.41%20PM.png" alt="Screenshot" /></p>

<p>Pick the virtual device you want and it will download it.</p>

<h2>Try starting a virtual device</h2>

<p>Here&rsquo;s what happened on my system:</p>

<ul>
<li>Hit Play to run virtual device</li>
<li>It asked me to configure the Android SDK location, I said &ldquo;No&rdquo;</li>
<li>Then it gave me an error that VirtualBox was not installed</li>
<li>I started VirtualBox manually</li>
<li>I retried running the virtual device, this time it worked and I saw</li>
</ul>


<p><img src="http://cl.ly/image/252a1T3d2U1x/Screen%20Shot%202013-11-22%20at%204.06.46%20PM.png" alt="Screenshot" /></p>

<h2>Configure Android Studio plugin</h2>

<p>Go to Preferences / Plugins and click &ldquo;Browse Repositories&rdquo;, then search for Genymotion.  Right click and choose &ldquo;Download and Install&rdquo;.</p>

<p><img src="http://cl.ly/image/110z2N2i1S3N/Screen%20Shot%202013-11-22%20at%204.08.42%20PM.png" alt="Screenshot" /></p>

<p>Restart Android Studio and you should see a new icon in your IDE.</p>

<p><img src="http://cl.ly/image/0F0N330u0C32/Screen%20Shot%202013-11-22%20at%204.11.00%20PM.png" alt="Screenshot" /></p>

<p>Click the icon and it will bring up Preferences, and choose the path to the Genymotion application.</p>

<p><img src="http://cl.ly/image/3G3K1s0p2h3x/Screen%20Shot%202013-11-22%20at%204.14.05%20PM.png" alt="Screenshot" /></p>

<p>Now if you click the Genymotion icon again, you will see the list of devices available:</p>

<p><img src="http://cl.ly/image/1Y120s1n1d2l/Screen%20Shot%202013-11-22%20at%204.15.20%20PM.png" alt="Screenshot" /></p>

<h2>Start an emulator</h2>

<p>Click the Genymotion icon within Android studio, select a virtual device, and hit start.</p>

<p>It will ask you to choose the location of the SDK:</p>

<p><img src="http://cl.ly/image/2N0W1h0O3Q2H/Screen%20Shot%202013-11-22%20at%204.18.02%20PM.png" alt="Screenshot" /></p>

<p>On Mac OSX, I was not able to brows to the path since the application was greyed out in the chooser dialog, so I went onto the shell and found it (/Applications/Android Studio.app/sdk) and just copied and pasted it:</p>

<p><img src="http://cl.ly/image/2V2H0d0M1z0f/Screen%20Shot%202013-11-22%20at%204.21.12%20PM.png" alt="Screenshot" /></p>

<p>Select a virtual device, and hit start (again).  It should come up now.</p>

<h2>Deploy an application/test to that emulator</h2>

<p>In Android Studio, hit the &ldquo;Play&rdquo; or &ldquo;Debug&rdquo; button, and you should see the dialog that asks you to choose an emulator:</p>

<p><img src="http://cl.ly/image/1I43000V3h12/Screen%20Shot%202013-11-22%20at%204.25.21%20PM.png" alt="Screenshot" /></p>

<p>and one of the emulators will be the Genymotion emulator.  After you choose that emulator and hit &ldquo;OK&rdquo;, it will run your application in the Genymotion emulator (this is showing the <a href="https://github.com/couchbaselabs/GrocerySync-Android">Grocery Sync</a> demo app for <a href="https://github.com/couchbase/couchbase-lite-android">Couchbase Lite</a>):</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/Genymotion_Grocery_sync.png" alt="Screenshot" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A simple data race in Go and how to fix it]]></title>
    <link href="http://tleyden.github.io/blog/2013/11/21/a-simple-data-race-in-go-and-how-to-fix-it/"/>
    <updated>2013-11-21T08:16:00-08:00</updated>
    <id>http://tleyden.github.io/blog/2013/11/21/a-simple-data-race-in-go-and-how-to-fix-it</id>
    <content type="html"><![CDATA[<p>Suppose you want to add an http handler which can show some things that in memory.</p>

<p>Simple, right?  Actually, if you aren&rsquo;t careful, doing this can lead to data races, even though only one goroutine is writing the data at any given time.</p>

<p>Here&rsquo;s the golang code (also on <a href="https://github.com/tleyden/go-scratchpad/blob/1521d96e8f093b06ed57cd32e702b8ccb458e270/concurrentaccess/main.go">github</a>) that reproduces the issue:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>type Foo struct {
</span><span class='line'>  content string
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>type FooSlice []*Foo
</span><span class='line'>
</span><span class='line'>func updateFooSlice(fooSlice FooSlice) {
</span><span class='line'>  for {
</span><span class='line'>      foo := &Foo{content: "new"}
</span><span class='line'>      (*fooSlice)[0] = foo
</span><span class='line'>      time.Sleep(time.Second)
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>func installHttpHandler(fooSlice FooSlice) {
</span><span class='line'>  handler := func(w http.ResponseWriter, r *http.Request) {
</span><span class='line'>      for _, foo := range fooSlice {
</span><span class='line'>          if foo != nil {
</span><span class='line'>              fmt.Fprintf(w, "foo: %v ", (*foo).content)
</span><span class='line'>          }
</span><span class='line'>      }
</span><span class='line'>
</span><span class='line'>  }
</span><span class='line'>  http.HandleFunc("/", handler)
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>func main() {
</span><span class='line'>  foo1 := &Foo{content: "hey"}
</span><span class='line'>  foo2 := &Foo{content: "yo"}
</span><span class='line'>  fooSlice := FooSlice{foo1, foo2}
</span><span class='line'>
</span><span class='line'>  installHttpHandler(fooSlice)
</span><span class='line'>
</span><span class='line'>  go updateFooSlice(fooSlice)
</span><span class='line'>
</span><span class='line'>  http.ListenAndServe(":8080", nil)
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>if you run this code with <code>go run main.go</code> and then open <code>http://localhost:8080</code> in your browser, it will work as expected.</p>

<p>But not so fast!  Lurking in this code are data races, and if you run this with race detection enabled using <code>go run -race main.go</code> and then access it with the browser, it will panic with:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>==================
</span><span class='line'>WARNING: DATA RACE
</span><span class='line'>Read by goroutine 6:
</span><span class='line'>  main.func·001()
</span><span class='line'>      /../concurrentaccess/main.go:45 +0x9e
</span><span class='line'>      ...
</span><span class='line'>Previous write by goroutine 4:
</span><span class='line'>  main.updateFooSlice()
</span><span class='line'>      /../concurrentaccess/main.go:35 +0x98
</span><span class='line'>      ...</span></code></pre></td></tr></table></div></figure>


<p>because there are two goroutines accessing the same slice without any protection &mdash; the main goroutine running the http server, and the goroutine running <code>updateFooSlice</code>.</p>

<h2>Fix #1 &ndash; use sync.mutex to lock the slice</h2>

<p>This isn&rsquo;t necessarily the <em>best</em> way to fix this, but it&rsquo;s the simplest to understand and explain.</p>

<p>Here are the changes to the code (also on <a href="https://github.com/tleyden/go-scratchpad/blob/8f031806d5f0d7becef844f5400f2cc663ff4bf7/concurrentaccess/main.go">github</a>):</p>

<ul>
<li>Import the <code>sync</code> package</li>
<li>Create a sync.Mutex object in the package-global namespace</li>
<li>Before updating the slice, lock the mutex, and after updating it, unlock it.</li>
<li>Before the http handler access the slice, it locks the mutex, and after it&rsquo;s done, it unlocks it.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>type Foo struct {
</span><span class='line'>  content string
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>type FooSlice []*Foo
</span><span class='line'>
</span><span class='line'>var mutex sync.Mutex
</span><span class='line'>
</span><span class='line'>func updateFooSlice(fooSlice FooSlice) {
</span><span class='line'>  for {
</span><span class='line'>      mutex.Lock()
</span><span class='line'>      foo := &Foo{content: "new"}
</span><span class='line'>      fooSlice[0] = foo
</span><span class='line'>      fooSlice[1] = nil
</span><span class='line'>      mutex.Unlock()
</span><span class='line'>      time.Sleep(time.Second)
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>func installHttpHandler(fooSlice FooSlice) {
</span><span class='line'>  handler := func(w http.ResponseWriter, r *http.Request) {
</span><span class='line'>      mutex.Lock()
</span><span class='line'>      defer mutex.Unlock()
</span><span class='line'>      for _, foo := range fooSlice {
</span><span class='line'>          if foo != nil {
</span><span class='line'>              fmt.Fprintf(w, "foo: %v ", (*foo).content)
</span><span class='line'>          }
</span><span class='line'>      }
</span><span class='line'>  }
</span><span class='line'>  http.HandleFunc("/", handler)
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>func main() {
</span><span class='line'>
</span><span class='line'>  foo1 := &Foo{content: "hey"}
</span><span class='line'>  foo2 := &Foo{content: "yo"}
</span><span class='line'>
</span><span class='line'>  fooSlice := FooSlice{foo1, foo2}
</span><span class='line'>
</span><span class='line'>  installHttpHandler(fooSlice)
</span><span class='line'>
</span><span class='line'>  go updateFooSlice(fooSlice)
</span><span class='line'>
</span><span class='line'>  http.ListenAndServe(":8080", nil)
</span><span class='line'>
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>If you now re-run the code with the <code>-race</code> flag and access <code>http://localhost:8080</code>, it won&rsquo;t panic.</p>

<h2>Digression &ndash; chan chan</h2>

<p>Before we can talk about Fix #2, we need to take a digression to talk about chan chan&rsquo;s &mdash; channels which contain other channels as the morsels of data that pass through the channel tubes (metachannels, if you will).</p>

<p><strong>tl;dr</strong> A channel describes a transport of sorts.  You can send a thing down that transport.  When using a chan chan, the thing you want to send down the transport is another transport to send things back.</p>

<p>If it&rsquo;s still a little fuzzy for you, here&rsquo;s the <a href="http://tleyden.github.io/blog/2013/11/23/understanding-chan-chans-in-go/">long description of chan chan&rsquo;s with diagrams</a></p>

<h2>Fix #2 &ndash; Use channels instead of <code>sync.Mutex</code></h2>

<p>In this version of the fix, the goroutine running the http handler (the main goroutine in this case), makes a response chan and passes it into a request chan chan that both goroutines can access.  It then reads the response from the response chan, which will contain a copy of the FooSlice.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>func installHttpHandler(fooSlice FooSlice) {
</span><span class='line'>        handler := func(w http.ResponseWriter, r *http.Request) {
</span><span class='line'>                response := make(chan FooSlice)
</span><span class='line'>                request &lt;- response
</span><span class='line'>                fooSliceCopy := &lt;-response
</span><span class='line'>                for _, foo := range fooSliceCopy {
</span><span class='line'>                        if foo != nil {
</span><span class='line'>                                fmt.Fprintf(w, "foo: %v ", (*foo).content)
</span><span class='line'>                        }
</span><span class='line'>                }
</span><span class='line'>        }
</span><span class='line'>        http.HandleFunc("/", handler)
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>The other goroutine updates the FooSlice and is also checking the request chan chan for new messages.  If it gets a new request message, it makes a copy of the FooSlice and sends it to the response chan.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>func updateFooSlice(fooSlice FooSlice) {
</span><span class='line'>        t := time.Tick(time.Second)
</span><span class='line'>        for {
</span><span class='line'>                select {
</span><span class='line'>                case &lt;-t:
</span><span class='line'>                        foo := &Foo{content: "new"}
</span><span class='line'>                        fooSlice[0] = foo
</span><span class='line'>                        fooSlice[1] = nil
</span><span class='line'>                case ch := &lt;-request:
</span><span class='line'>                        fooSliceCopy := make(FooSlice, len(fooSlice))
</span><span class='line'>                        copy(fooSliceCopy, fooSlice)
</span><span class='line'>                        ch &lt;- fooSliceCopy
</span><span class='line'>                }
</span><span class='line'>        }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Again, if you now re-run this code with the <code>-race</code> flag and access <code>http://localhost:8080</code>, it won&rsquo;t panic.</p>

<p>The full code sample is <a href="https://github.com/tleyden/go-scratchpad/blob/e92685b35c2d6f61274c7e72a3cdebf85817878a/concurrentaccess/main.go">available on gihub</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debugging HTTP traffic in Android apps with a proxy]]></title>
    <link href="http://tleyden.github.io/blog/2013/11/20/debugging-http-traffic-in-android-apps-with-a-proxy/"/>
    <updated>2013-11-20T14:35:00-08:00</updated>
    <id>http://tleyden.github.io/blog/2013/11/20/debugging-http-traffic-in-android-apps-with-a-proxy</id>
    <content type="html"><![CDATA[<p>If you need to debug the HTTP communication between a server and an Android app running in an emulator or device, here&rsquo;s some instructions on how I went about doing it.</p>

<p>Here&rsquo;s the overall diagram of what&rsquo;s happening:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/android_proxy.png" alt="Diagram" /></p>

<h2>Install a Proxy</h2>

<p>I&rsquo;m using <a href="http://www.charlesproxy.com/">Charles Proxy</a> and highly recommend it.</p>

<p>As far as proxy configuration, the defaults should be fine.  It should be listening on port 8888 and proxying everything.  If you need HTTPS, you might have to configure that, I don&rsquo;t remember if it&rsquo;s enabled by default.</p>

<h2>Configure the Android Emulator to use that proxy</h2>

<p>There is a blog that describes how to get to this screen, I don&rsquo;t have the link handy.  Essentially once you get to this screen, just update the ip to have the special 10.0.2.2 ip address which represents your workstation, and the port the proxy is listening on (port 8888).</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/android_emu_proxy_config.png" alt="Screenshot" /></p>

<h2>Run an HTTP server on your workstation, on port 4984</h2>

<p>Actually use any port you want, but in my case I&rsquo;m connecting to a server that runs on port 4984.</p>

<h2>Configure your app to connect to 127.0.0.1:4984</h2>

<p>This is actually a bit counterintuitive, but the idea is that the address must be reachable from the workstation&rsquo;s network, not from the emulator&rsquo;s network.</p>

<p>So for that reason, if the server is running on the workstation, you would want to use 127.0.0.1 as the IP.</p>

<p>As long as the server is reachable from your workstation, you can use that IP and it will go through the proxy.</p>

<h2>View HTTP traffic in proxy</h2>

<p>Here&rsquo;s what the HTTP JSON response looks like in the proxy:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/charles_proxy_screenshot.png" alt="Screenshot" /></p>

<h2>If you are using the Genymotion emulator</h2>

<p>The Genymotion emulator has a different method of modifying the proxy setting:</p>

<p>In your virtual device:</p>

<ul>
<li>Go to Android settings menu</li>
<li>In Wireless &amp; Networks section, select Wi-Fi</li>
<li>Press and hold for 2 seconds WiredSSID network in the list</li>
<li>Choose Modify Network</li>
<li>Check Show advanced options</li>
<li>Select Manual for Proxy settings menu entry</li>
<li>Now enter the proxy settings provided by your network administrator

<ul>
<li>Ip: 10.0.3.2 (this is a special ip that Genymotion uses to connect back to the host)</li>
<li>Port: 8888</li>
</ul>
</li>
<li>Finally press the Save button</li>
</ul>


<p>If you don&rsquo;t have Genymotion running, you should check it out, it runs <em>much</em> faster than the default emulator.  <a href="http://tleyden.github.io/blog/2013/11/22/android-studio-plus-genymotion-emulator/">How to get Android Studio + Genymotion working</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running couchbase cluster under docker]]></title>
    <link href="http://tleyden.github.io/blog/2013/11/14/running-couchbase-cluster-under-docker/"/>
    <updated>2013-11-14T15:45:00-08:00</updated>
    <id>http://tleyden.github.io/blog/2013/11/14/running-couchbase-cluster-under-docker</id>
    <content type="html"><![CDATA[<p>This tutorial will show you how to run a cluster of Couchbase Servers, where each node is running inside of a docker image.</p>

<p><img src="http://cl.ly/image/2G0h381N3o42/docker%20couchbase%20cluster.png" alt="Diagram" /></p>

<p>This probably looks like <em>a lot</em> of layers, and you might be wondering if this will make your system crawl &mdash; but bear in mind that the Docker virtualization model is very lightweight, and so basically everything under CoreOS has very little resource overhead.</p>

<h2>Install Docker and dependencies</h2>

<p>If you are on OSX and don&rsquo;t have Docker installed, check out <a href="http://tleyden.github.io/blog/2013/11/12/docker-on-osx/">Install Docker on OSX</a> before proceeding.</p>

<h2>Edit vagrant file to add port mappings</h2>

<p>In order to access all the Couchbase Server nodes from the host, <em>which doesn&rsquo;t currently work</em>, you would need to add the following entries to your Vagrantfile:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>config.vm.network "forwarded_port", guest: 8091, host: 8091
</span><span class='line'>config.vm.network "forwarded_port", guest: 8092, host: 8092
</span><span class='line'>config.vm.network "forwarded_port", guest: 11210, host:   11210</span></code></pre></td></tr></table></div></figure>


<p>As mentioned, accessing all of the Couchbase Server nodes from the host does not currently work.  However, I think at least some of these entries are needed, so to be on the safe side just add all of them.</p>

<h2>Start CoreOS and ssh in</h2>

<p>Execute the following commands in the directory where you have your CoreOS Vagrantfile.  In my case, I have it under <code>~/Tools/coreos-vagrant</code> and it contains a Vagrantfile, a README.md file, and a few others.</p>

<p>Start CoreOS</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vagrant up</span></code></pre></td></tr></table></div></figure>


<p>SSH into CoreOS</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vagrant ssh</span></code></pre></td></tr></table></div></figure>


<h2>Start docker image for a single node</h2>

<p>Here&rsquo;s how to fire up the first docker image</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>docker run -i -t -d -p 11210:11210 -p 8091:7081 -p 8092:8092 dustin/couchbase:latest</span></code></pre></td></tr></table></div></figure>


<p>and you should see:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Unable to find image 'dustin/couchbase:latest' (tag: latest) locally
</span><span class='line'>Pulling repository dustin/couchbase
</span><span class='line'>9e0279ab340d: Download complete
</span><span class='line'>...
</span><span class='line'>845987ce946b</span></code></pre></td></tr></table></div></figure>


<p>Find the name of the docker instance by running <code>$ docker ps</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>core@localhost ~ $ docker ps
</span><span class='line'>CONTAINER ID        IMAGE                     COMMAND                CREATED              STATUS              PORTS                                                                      NAMES
</span><span class='line'>845987ce946b        dustin/couchbase:latest   /bin/sh -c /usr/loca   About a minute ago   Up About a minute   0.0.0.0:11210-&gt;11210/tcp, 0.0.0.0:8091-&gt;7081/tcp, 0.0.0.0:8092-&gt;8092/tcp   purple_kangaroo</span></code></pre></td></tr></table></div></figure>


<p>In this case it&rsquo;s <em>purple_kangaroo</em>.</p>

<p>Now take a look at the logs for that docker instance:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>core@localhost ~ $ docker logs purple_kangaroo
</span><span class='line'>/opt/couchbase/etc/couchbase_init.d: 45: ulimit: error setting limit (Operation not permitted)
</span><span class='line'>/opt/couchbase/etc/couchbase_init.d: 47: ulimit: error setting limit (Operation not permitted)
</span><span class='line'> * Started couchbase-server
</span><span class='line'>Starting cluster
</span><span class='line'>SUCCESS: init 127.0.0.1
</span><span class='line'>SUCCESS: bucket-create</span></code></pre></td></tr></table></div></figure>


<p>If you only want to run one Couchbase Server node, you are pretty much done and you can skip to the section below to login to the Couchbase Server admin</p>

<p>If you want to run a cluster of Couchbase Server nodes, read on.</p>

<h2>Start docker images for other nodes</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker run -i -t -d -link purple_kangaroo:alpha dustin/couchbase:latest</span></code></pre></td></tr></table></div></figure>


<p>This will start another node that is linked to the initial node, and will be in the same cluster.  There is some Weird Magic behind the scenes that makes that all work.</p>

<h1>Go to Couchbase Server admin</h1>

<p>Open <a href="http://localhost:8091/">http://localhost:8091/</a> in your browser, and you should see a login screen, where the default credentials are Administrator/password.</p>

<p>After you login, you should see the Admin UI with three nodes in your cluster:</p>

<p><img src="http://cl.ly/image/2K3i1v2w3H0E/Screen%20Shot%202013-11-14%20at%204.47.18%20PM.png" alt="Screenshot" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Investigating an Android SQLite threading deadlock]]></title>
    <link href="http://tleyden.github.io/blog/2013/11/14/investigating-an-android-sqlite-threading-deadlock/"/>
    <updated>2013-11-14T11:24:00-08:00</updated>
    <id>http://tleyden.github.io/blog/2013/11/14/investigating-an-android-sqlite-threading-deadlock</id>
    <content type="html"><![CDATA[<p>In an unreleased version of Couchbase Lite for Android, I was seeing the following error:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SQLiteConnectionPool The connection pool for database has been unable to grant a connection to thread
</span><span class='line'>SQLiteConnectionPool(14004): Connections: 0 active, 1 idle, 0 available.</span></code></pre></td></tr></table></div></figure>


<h2>Here&rsquo;s what turned out to be happening</h2>

<p><img src="http://cl.ly/image/0H40001q3T1Q/android_sqlite_deadlock.png" alt="Diagram" /></p>

<ul>
<li>Create a single SQLiteDatabase object that is shared among all threads</li>
<li>WriterThread spawned</li>
<li>t0: WriterThread opens a transaction and inserts some data</li>
<li>t1: WriterThread spawns ReaderThread</li>
<li>t2: ReaderThread attempts to read some data</li>
<li>t3: WriterThread calls .join() on ReaderThread to wait for it to finish</li>
<li>Deadlock!</li>
</ul>


<h2>Digging into the deadlock</h2>

<ul>
<li>WriterThread has an open transaction, and therefore is holding on to the one and only connection owned by the single SQLiteDatabase object</li>
<li>ReaderThread is trying to get a new connection to execute its statement, but cannot because WriterThread is holding the only one available</li>
<li>WriterThread is waiting for ReaderThread to finish so it can finish it&rsquo;s transaction and release the connection.</li>
<li>Deadlock!</li>
</ul>


<h2>Code to reproduce the issue</h2>

<p><a href="https://github.com/couchbaselabs/android-sqlite-experiments/blob/master/AndroidSQLiteExperiments/src/main/java/com/couchbaselabs/droidsqliteexprmnts/experiments/ThreadsSingleConnectionDeadlock.java">ThreadsSingleConnectionDeadlock.java</a></p>

<h2>Fix Idea #1 &ndash; Don&rsquo;t make WriterThread join ReaderThread</h2>

<p>This is the somewhat naive and obvious fix.</p>

<p>In the case of this particular bug, it looks like the code can be reworked to avoid this problem altogether, and should end up with a cleaner design anyway.</p>

<h2>(Bad) Fix Idea #2 &ndash; Each thread gets its own SQLiteDatabase object (for the same database)</h2>

<p>You would think this could solve the problem, and it probably would, but there are some major caveats here.</p>

<p>As explained in <a href="http://touchlabblog.tumblr.com/post/24474398246/android-sqlite-locking">Android Sqlite Locking</a>:</p>

<blockquote><p>If you try to write to the database from actual distinct connections at the same time, one will fail.  It will not wait till the first is done and then write.  It will simply not write your change.  Worse, if you don’t call the right version of insert/update on the SQLiteDatabase, you won’t get an exception.  You’ll just get a message in your LogCat, and that will be it.</p></blockquote>

<p>So to avoid this kind of hellish scenario, it&rsquo;s definitely safer to stick with a <a href="http://touchlabblog.tumblr.com/post/24474750219/single-sqlite-connection">Single SQLite connection</a></p>

<h2>Is there really a good fix?</h2>

<p>So what if you absolutely needed to have the ability to have WriterThread join ReaderThread, and you wanted to avoid giving each thread it&rsquo;s own SQLiteDatabase object, how could that be accomplished?</p>

<p>Or is that just a silly scenario and it&rsquo;s better to just not do that?  (it seems fairly easy to do it by accident in any scenarios where threads are waiting on another and both accessing the same database)</p>

<p>Actually, I don&rsquo;t know &mdash; it&rsquo;s an open question.  Comments welcome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker on OSX]]></title>
    <link href="http://tleyden.github.io/blog/2013/11/12/docker-on-osx/"/>
    <updated>2013-11-12T21:01:00-08:00</updated>
    <id>http://tleyden.github.io/blog/2013/11/12/docker-on-osx</id>
    <content type="html"><![CDATA[<p><img src="http://cl.ly/image/302X103n330L/docker.png" alt="Docker.png" /></p>

<h1>Goal</h1>

<p>Get Docker running under OSX.</p>

<h2>Environment</h2>

<ul>
<li><p>OSX Mavericks</p></li>
<li><p>Macbook Retina</p></li>
</ul>


<h2>Understanding the tools</h2>

<ul>
<li>Vagrant is a tool to provision VMs.</li>
<li>Virtualbox is VM software.</li>
<li>CoreOS is an operating system based on linux that&rsquo;s all about running docker.</li>
</ul>


<h2>Install VirtualBox + Vagrant</h2>

<ul>
<li><p>Install VirtualBox via <a href="http://download.virtualbox.org/virtualbox/4.3.2/VirtualBox-4.3.2-90405-OSX.dmg">VirtualBox OSX installer</a></p></li>
<li><p>Install Vagrant via <a href="http://files.vagrantup.com/packages/a40522f5fabccb9ddabad03d836e120ff5d14093/Vagrant-1.3.5.dmg">Vagrant OSX installer</a></p></li>
</ul>


<h2>Vagrant Smoke Test: run Ubuntu Precise</h2>

<p>To make sure Vagrant is installed correctly, run the following commands to see if Ubuntu Precise comes up and you are able to ssh into it.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant init precise32 http://files.vagrantup.com/precise32.box
</span><span class='line'>vagrant up
</span><span class='line'>vagrant ssh</span></code></pre></td></tr></table></div></figure>


<p>If that doesn&rsquo;t work, you should probably fix it before moving on.  Otherwise, keep reading.</p>

<h2>Install/Run CoreOS</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone https://github.com/coreos/coreos-vagrant/
</span><span class='line'>cd coreos-vagrant
</span><span class='line'>vagrant up</span></code></pre></td></tr></table></div></figure>


<h2>SSH into CoreOS</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant ssh</span></code></pre></td></tr></table></div></figure>


<h2>Run stock ubuntu docker image</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>docker run -t -i ubuntu bash</span></code></pre></td></tr></table></div></figure>


<p>After running this, you should be ssh&rsquo;d inside of an Ubuntu shell, running under docker (running inside of VirtualBox .. etc, all the way up the onion)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deciphering some Go code]]></title>
    <link href="http://tleyden.github.io/blog/2013/09/20/deciphering-some-go-code/"/>
    <updated>2013-09-20T11:11:00-07:00</updated>
    <id>http://tleyden.github.io/blog/2013/09/20/deciphering-some-go-code</id>
    <content type="html"><![CDATA[<p>While trying to use <a href="http://godoc.org/code.google.com/p/dsallings-couch-go">couch-go</a> and looking at the source, I&rsquo;ve come across some things I don&rsquo;t understand.</p>

<h1>Is function wrapper needed?</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>resp, err := client.Get(full_url)
</span><span class='line'>log.Printf("resp: %v err: %v", resp, err)
</span><span class='line'>if err == nil {
</span><span class='line'>    func() {
</span><span class='line'>        defer resp.Body.Close()
</span><span class='line'>        defer conn.Close()
</span><span class='line'>
</span><span class='line'>        tc := timeoutClient{resp.Body, conn, timeout}
</span><span class='line'>        largest = handler(&tc)
</span><span class='line'>    }()
</span><span class='line'>} else {
</span><span class='line'>    log.Printf("Error in stream: %v", err)
</span><span class='line'>    time.Sleep(time.Second * 1)
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>Why the separate function wrapper here?  Why not just call:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>defer resp.Body.Close()
</span><span class='line'>defer conn.Close()
</span><span class='line'>tc := timeoutClient{resp.Body, conn, timeout}
</span><span class='line'>largest = handler(&tc)</span></code></pre></td></tr></table></div></figure>


<p>directly?</p>

<h1>How to elegantly dump a request body?</h1>

<p>I was trying to debug something, and I wanted to print out the json string before it was being parsed, and here&rsquo;s what I ended up doing:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>body, err0 := ioutil.ReadAll(r.Body)
</span><span class='line'>bodyStr := string(body)
</span><span class='line'>log.Printf("body: %v err: %v", bodyStr, err0)
</span><span class='line'>newBody := bytes.NewBuffer(body)
</span><span class='line'>d := json.NewDecoder(newBody)
</span><span class='line'>// d := json.NewDecoder(r.Body) &lt;-- orig code
</span><span class='line'>if err := d.Decode(results); err != nil {
</span><span class='line'>    log.Printf("Decode err: %v", err)
</span><span class='line'>    return err
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>it seems like there should be a slicker way, like maybe rewinding the r.Body Reader?</p>

<p><strong>Answer</strong>: yes, there is a <em>much</em> slicker way, <code>io.TeeReader</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>d := json.NewDecoder(io.TeeReader(r.Body, os.Stdout))</span></code></pre></td></tr></table></div></figure>


<h1>Using new() with a map &mdash; does this look right?</h1>

<p>According to &ldquo;The Way To Go&rdquo; (book), you are not supposed to be using new() with maps.  However I did this in one case:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>type Document map[string]interface{}
</span><span class='line'>
</span><span class='line'>func (game Game) fetchLatestGameDoc() (doc Document, err error) {
</span><span class='line'>        fetchedDoc := new(Document)
</span><span class='line'>        err = game.db.Retrieve(GAME_DOC_ID, fetchedDoc)
</span><span class='line'>        if err == nil {
</span><span class='line'>     doc = *fetchedDoc
</span><span class='line'>        }
</span><span class='line'>        return
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>is there a better way?  When I tried using make(), I got the error <code>err: json: Unmarshal(non-pointer checkerlution.Document)</code>.  Using make() followed by &amp; didn&rsquo;t work either.</p>

<h1>Type Assertion hell</h1>

<p>I&rsquo;m trying to get some data that&rsquo;s fairly deep in some json, and ended up doing a lot of awkward feeling type assertions:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>func (game Game) checkGameDocInChanges(changes Changes) bool {
</span><span class='line'>        foundGameDoc := false
</span><span class='line'>        changeResultsRaw := changes["results"]
</span><span class='line'>        changeResults := changeResultsRaw.([]interface{})
</span><span class='line'>        for _, changeResultRaw := range changeResults {
</span><span class='line'>                changeResult := changeResultRaw.(map[string]interface{})
</span><span class='line'>                docIdRaw := changeResult["id"]
</span><span class='line'>                docId := docIdRaw.(string)
</span><span class='line'>                if strings.Contains(docId, GAME_DOC_ID) {
</span><span class='line'>                        foundGameDoc = true
</span><span class='line'>              }
</span><span class='line'>        }
</span><span class='line'>        return foundGameDoc
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>there must be a better way?</p>

<p>Also I didn&rsquo;t get why this didn&rsquo;t work:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>type ChangeItem map[string]interface{}
</span><span class='line'>...
</span><span class='line'>changeResult := changeResultRaw.(ChangeItem)</span></code></pre></td></tr></table></div></figure>


<p>to make it work I had to change it to:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>changeResult := changeResultRaw.(map[string]interface{})</span></code></pre></td></tr></table></div></figure>


<h1>Getting unexpected float64 back from JSON, had to do awkward type conversions</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>func (game Game) isOurTurn(gameDoc Document) bool {
</span><span class='line'>        activeTeamRaw := gameDoc["activeTeam"]
</span><span class='line'>        activeTeam := int(activeTeamRaw.(float64))
</span><span class='line'>        return activeTeam == game.ourTeamId
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Json snippet:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{"_id":"game:checkers","activeTeam":0}</span></code></pre></td></tr></table></div></figure>


<h1>Can&rsquo;t check for nil</h1>

<p>I have these structs:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>type Game struct {
</span><span class='line'>    gameState            GameState
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>type GameState struct {
</span><span class='line'>   ...
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>and in a loop, I set the gameState field of the Game object to value.  I&rsquo;m trying to detect if it&rsquo;s the first pass through the loop with this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>isFirstGame := (game.gameState == nil)</span></code></pre></td></tr></table></div></figure>


<p>but I get the error <code>cannot convert nil to type GameState</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java coding challenge]]></title>
    <link href="http://tleyden.github.io/blog/2013/09/19/java-coding-challenge/"/>
    <updated>2013-09-19T13:42:00-07:00</updated>
    <id>http://tleyden.github.io/blog/2013/09/19/java-coding-challenge</id>
    <content type="html"><![CDATA[<p>Write a server that uses tcp sockets which returns images to clients, and avoids duplicate work for concurrent requests for the same image.</p>

<h1>Description</h1>

<p>A server will listen for tcp client connections and generate PNG checkerboard images and return them to clients that request them.  Example checkerboard image:</p>

<p><img src="http://tleyden.github.io/images/checkerboard.png" width="295" height="105" title="image" alt="images"></p>

<p>The client will send a single parameter to the server after it opens the tcp socket connection to the server:</p>

<ul>
<li> The size of the &ldquo;checkboard image&rdquo;, which will be a single scalar value like 5, which will result in a 5x5 square, as shown above.</li>
</ul>


<p>The server will use the following default values when generating the checkerboard image:</p>

<ul>
<li> size: each square will be 60 x 60 pixels.</li>
<li> color: squares will be alternating black and white, with black for the square in the 0th row and 0th column, and white for the square in the 1st row and 0th column, etc.  Exactly as shown above.</li>
</ul>


<h1>Basic Requirements</h1>

<ul>
<li>Written in either Java or Scala</li>
<li>To generate the actual image, you can use anything you want.  The image format can be any popular image format (PNG, JPEG, GIF, etc..)</li>
<li>For the data structures required by the server, you can use any existing data structures within Java itself or a 3rd party, there is no requirement to develop your own.</li>
<li>The server will respond with the image data in PNG format, and then close the connection.</li>
</ul>


<h1>Advanced Requirements</h1>

<ul>
<li>In the method that generates the square, there must be a call to Thread.sleep(Y) before returning.  Y represents number of milliseconds to sleep, and will be a random number between 0 and 5000.</li>
<li>The server can handle multiple client requests in parallel (as opposed to handling them in serial).  In other words, if client1 contacts the server, and then client2 contacts the server a few milliseconds later, there is a chance that client2 will receive a response before client1, depending on the random sleep described above.</li>
<li>In order to avoid needlessly generating the same image twice, if the server is asked to generate a square of size X by client1, and then again asked to generate another square of size X by client2 before it has returned the square to client1, it will simply wait for the square for client1 is finished being generated and return that same square data to both client2 and client1.  Here is an example timeline to show how events would roughly be ordered:

<ul>
<li>At 12:00:00 Client1 asks for square of size 6</li>
<li>At 12:00:01 The server starts to generate the square for client1</li>
<li>At 12:00:01 Client2 asks for square of size 6 (the server does <em>not</em> try to generate a new square, since there is already a pending request for an identical square)</li>
<li>At 12:00:06 The server finishes generating the square of size 6, as originally requested by client1</li>
<li>At 12:00:07 The server returns the square to client1</li>
<li>At 12:00:07 The server returns the same square to client2</li>
</ul>
</li>
</ul>


<h1>Deliverables</h1>

<ul>
<li>server.sh &ndash; starts the server that listens on 8000</li>
<li>client.sh X &ndash; runs a client that:

<ul>
<li>connects to localhost:8000</li>
<li>passes the parameter X (the size of the checkboard image) to the server</li>
<li>reads the PNG into a file called X.png</li>
<li>prints a message to say its finished.</li>
</ul>
</li>
<li>A zip file that contains all jar file dependencies <em>or</em> a document that describes on how to download the required dependencies</li>
</ul>


<h1>Shortcuts</h1>

<p>If this feels like too much work, take the following shortcut:</p>

<ul>
<li>Rather than return an image, just create a string which would represent the image, where X represents black and O represents white.  Eg, if it was a 2x2 square, return &ldquo;X00X&rdquo;</li>
</ul>


<h1>Bonus points</h1>

<ul>
<li>Record your commits in a local git repository as you work, and submit a zip file of the repository along with the other deliverables</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress Setup Part II]]></title>
    <link href="http://tleyden.github.io/blog/2013/09/07/octopress-setup-part-ii/"/>
    <updated>2013-09-07T11:46:00-07:00</updated>
    <id>http://tleyden.github.io/blog/2013/09/07/octopress-setup-part-ii</id>
    <content type="html"><![CDATA[<h1>Showing my tweets on my blog</h1>

<p>What&rsquo;s a blog without a few tweets to spice it up?</p>

<p>Here&rsquo;s my first attempt, which didn&rsquo;t work.  I modified my _config.yml file to have:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>twitter_user: tleydn</span></code></pre></td></tr></table></div></figure>


<p>After some desperate googling, I came across <a href="http://blog.jmac.org/blog/2013/03/30/putting-twitter-back-into-octopress/">this blog post</a> which seems to suggest that twitter support has been remoted from Octopress, with instructions on how to embed a twitter widget.</p>

<p>Here&rsquo;s a few tricks to make it looks slightly less butt-ugly:</p>

<ul>
<li>In the twitter widget generator, choose the &ldquo;dark&rdquo; theme.</li>
<li>Modify the widget class to have dimensions <code>width="300" height="350"</code> so that it is slightly less distracting when viewing content.</li>
</ul>


<h1>Adding an &ldquo;About&rdquo; page</h1>

<p>I followed the instructions on <a href="http://octopress.org/docs/theme/template/">Theming &amp; Customization</a>, which added an About section on the top of the sidebar on the right side.</p>

<h1>Enabling Disqus comments</h1>

<p>This was trivial:</p>

<ul>
<li>Go to <a href="http://disqus.com">Disqus</a> and register a new site</li>
<li>Add the &ldquo;shortname&rdquo; to the _config.yml file</li>
</ul>


<h1>Let&rsquo;s pimp this thing &mdash; Adding an image in the header</h1>

<ul>
<li>Open octopress/source/_includes/custom/header.html</li>
<li>Find an image graphic and save it into octopress/source/images (in my case, it was /images/rabbit_hole_graphic.png)</li>
<li>Add a new html table element, and in one cell add a link to the image with the appropriate size dimensions.</li>
</ul>


<p>Example header.html file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  &lt;table&gt;&lt;tr&gt;&lt;td&gt;
</span><span class='line'>  &lt;h1&gt;&lt;a href="{{ root_url }}/"&gt;{{ site.title }}&lt;/a&gt;&lt;/h1&gt;
</span><span class='line'>  {% if site.subtitle %}
</span><span class='line'>    &lt;h2&gt;{{ site.subtitle }}&lt;/h2&gt;
</span><span class='line'>  {% endif %}
</span><span class='line'>  &lt;/td&gt;&lt;td&gt;&nbsp;&nbsp;
</span><span class='line'>  {% img left /images/rabbit_hole_graphic.png 295 105 'image' 'images' %}
</span><span class='line'>  &lt;/td&gt;&lt;/tr&gt;
</span><span class='line'>  &lt;/table&gt;
</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;m not a hipster, it&rsquo;s just that my HTML coding skillz are stuck at about 1995.  If you are seething with the overwhelming urge to tell me how to do this in 2013 CSS style, go right ahead and add a comment.</p>

<p>Anyway, the end justifies the means:</p>

<p><img class="center" src="http://tleyden.github.io/images/ScreenShotBlogIIa.png" title="image" alt="images"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress Setup Part I]]></title>
    <link href="http://tleyden.github.io/blog/2013/09/07/octopress-setup-part-i/"/>
    <updated>2013-09-07T11:26:00-07:00</updated>
    <id>http://tleyden.github.io/blog/2013/09/07/octopress-setup-part-i</id>
    <content type="html"><![CDATA[<p>I&rsquo;m writing this blog entry as I&rsquo;m creating my blog.  I have decided to use <a href="http://octopress.org/">Octopress</a>, and I&rsquo;m initially going to host it on <a href="http://pages.github.com/">Github Pages</a>.</p>

<h2>Step 1: create a github pages repo</h2>

<p>In my case, I made a new repo called tleyden/tleyden.github.io.</p>

<h2>Step 2: push an index.html</h2>

<p>Clone the repo</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone git@github.com:tleyden/tleyden.github.io.git</span></code></pre></td></tr></table></div></figure>


<p>Add some content</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd tleyden.github.io
</span><span class='line'>$ echo "&lt;h1&gt;hello&lt;/h1&gt;" &gt; index.html</span></code></pre></td></tr></table></div></figure>


<p>Commit and push</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git add index.html
</span><span class='line'>$ git commit -m "empty blog"
</span><span class='line'>$ git push origin master</span></code></pre></td></tr></table></div></figure>


<h2>Step 3: see if it actually worked</h2>

<p>Go to <a href="http://tleyden.github.io/">http://tleyden.github.io/</a> to see if it works.</p>

<p><strong>It did not work.  WTH!?</strong></p>

<p>Oh wait, it says: <em>It may take up to ten minutes until your page is available.</em></p>

<p>Patiently hit reload 5 times / minute, and 7 minutes later .. <strong>IT WORKS!</strong></p>

<h2>Step 4: get rvm (octopress dependency)</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ \curl -L https://get.rvm.io | bash
</span><span class='line'>$ source /Users/traun/.rvm/scripts/rvm
</span><span class='line'>$ rvm notes</span></code></pre></td></tr></table></div></figure>


<h2>Step 5: get ruby 1.9.3 (octopress dependency)</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rvm install 1.9.3
</span><span class='line'>Searching for binary rubies, this might take some time.
</span><span class='line'>No binary rubies available for: osx/10.8/x86_64/ruby-1.9.3-p448.
</span><span class='line'>Continuing with compilation. Please read 'rvm help mount' to get more information on binary rubies.
</span><span class='line'>Checking requirements for osx.
</span><span class='line'>Installing requirements for osx.
</span><span class='line'>Updating system......
</span><span class='line'>Error running 'requirements_osx_brew_update_system ruby-1.9.3-p448',
</span><span class='line'>please read /Users/traun/.rvm/log/1378534467_ruby-1.9.3-p448/update_system.log
</span><span class='line'>Requirements installation failed with status: 1.</span></code></pre></td></tr></table></div></figure>


<p>I managed to get past this error by following this <a href="http://stackoverflow.com/questions/14113427/brew-update-failed">stack overflow post</a></p>

<p>Let&rsquo;s try this again ..</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Installing required packages: gcc46, libyaml, libksba, openssl......................................................................................................</span></code></pre></td></tr></table></div></figure>


<p>45 minutes later, it finally worked.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rvm use 1.9.3
</span><span class='line'>$ rvm rubygems latest</span></code></pre></td></tr></table></div></figure>


<h2>Step 6: get octopress</h2>

<p>Follow the <a href="http://octopress.org/docs/setup/">Setup Ocotpress</a> instructions</p>

<h2>Step 7: recreate repo</h2>

<p>So this is a little <em>awkward</em>, and looking back I wish I hadn&rsquo;t pushed that index.html earlier, because it interferes with the github push in the next step.</p>

<ul>
<li>Delete your entire github repository: <code>username/username.github.io</code></li>
<li>Create a new empty github repository: <code>username/username.github.io</code></li>
</ul>


<h2>Step 8: deploy to github pages</h2>

<p>Follow the <a href="http://octopress.org/docs/deploying/github/">Deploy to Github pages</a> instructions.</p>

<p>There is one step that is crucial if you don&rsquo;t want to accidentally lose your blog content:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git add .
</span><span class='line'>git commit -m 'your message'
</span><span class='line'>git push origin source</span></code></pre></td></tr></table></div></figure>


<p>After doing that, your github repo should have two branches:</p>

<ul>
<li>Master: the &ldquo;published blog&rdquo; goes here, and will have a top-level index.html</li>
<li>Source: the entire octopress source tree, plus a &ldquo;source&rdquo; and &ldquo;sass&rdquo; directory.  The &ldquo;source&rdquo; directory is where your blog markdown content will actually live.</li>
</ul>


<h2>Step 9: write a blog entry</h2>

<p>Follow the <a href="http://octopress.org/docs/blogging/">New blog post</a> instructions.</p>

<h2>Step 10: re-deploy</h2>

<p>From the last step in the <a href="http://octopress.org/docs/deploying/github/">Deploy to Github pages</a> instructions, do the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rake generate
</span><span class='line'>$ rake deploy</span></code></pre></td></tr></table></div></figure>


<h2>Step 11: revel in it&rsquo;s beauty</h2>

<p><img src="http://cl.ly/image/1e2x3I293X3w/Screen%20Shot%202013-09-07%20at%2012.21.57%20AM.png" alt="screenshot" /></p>

<h2>Step 12: Oops, don&rsquo;t forget to push the source changes!</h2>

<p>Even though the blog content is deployed (eg, your master branch with your content has been pushed to github), the source is still sitting on your computer.  If your hard drive crashes, you&rsquo;ll lose your markdown, which is no fun.</p>

<p>Here&rsquo;s how to push the latest changes of your source files up to github:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git add .
</span><span class='line'>git commit -m 'I just added a new blog entry'
</span><span class='line'>git push origin source</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
