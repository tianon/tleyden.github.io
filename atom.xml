<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Seven Story Rabbit Hole]]></title>
  <link href="http://tleyden.github.io/atom.xml" rel="self"/>
  <link href="http://tleyden.github.io/"/>
  <updated>2014-11-13T19:35:11-08:00</updated>
  <id>http://tleyden.github.io/</id>
  <author>
    <name><![CDATA[Traun Leyden]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[An example of using NSQ from Go]]></title>
    <link href="http://tleyden.github.io/blog/2014/11/12/an-example-of-using-nsq-from-go/"/>
    <updated>2014-11-12T07:26:00-08:00</updated>
    <id>http://tleyden.github.io/blog/2014/11/12/an-example-of-using-nsq-from-go</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/bitly/nsq">NSQ</a> is a message queue, similar to RabbitMQ.  I decided I&rsquo;d give it a whirl.</p>

<h2>Install Nsq</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ wget https://s3.amazonaws.com/bitly-downloads/nsq/nsq-0.2.31.darwin-amd64.go1.3.1.tar.gz
</span><span class='line'>$ tar xvfz nsq-0.2.31.darwin-amd64.go1.3.1.tar.gz
</span><span class='line'>$ sudo mv nsq-0.2.31.darwin-amd64.go1.3.1/bin/* /usr/local/bin</span></code></pre></td></tr></table></div></figure>


<h2>Launch Nsq</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ nsqlookupd & 
</span><span class='line'>$ nsqd --lookupd-tcp-address=127.0.0.1:4160 &
</span><span class='line'>$ nsqadmin --lookupd-http-address=127.0.0.1:4161 &</span></code></pre></td></tr></table></div></figure>


<h2>Get Go client library</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ go get -u -v github.com/bitly/go-nsq</span></code></pre></td></tr></table></div></figure>


<h2>Create a producer</h2>

<p>Add the following code to main.go:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package main
</span><span class='line'>
</span><span class='line'>import (
</span><span class='line'>  "log"
</span><span class='line'>  "github.com/bitly/go-nsq"
</span><span class='line'>)
</span><span class='line'>
</span><span class='line'>func main() {
</span><span class='line'>  config := nsq.NewConfig()
</span><span class='line'>  w, _ := nsq.NewProducer("127.0.0.1:4150", config)
</span><span class='line'>
</span><span class='line'>  err := w.Publish("write_test", []byte("test"))
</span><span class='line'>  if err != nil {
</span><span class='line'>      log.Panic("Could not connect")
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  w.Stop()
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>and then run it with:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ go run main.go</span></code></pre></td></tr></table></div></figure>


<p>If you go to your NSQAdmin at <a href="http://localhost:4171/">http://localhost:4171</a>, you should see a single message in the <code>write_test</code> topic.</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/nsq_admin.png" alt="NSQAdmin" /></p>

<h2>Create a consumer</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package main
</span><span class='line'>
</span><span class='line'>import (
</span><span class='line'>  "log"
</span><span class='line'>  "sync"
</span><span class='line'>
</span><span class='line'>  "github.com/bitly/go-nsq"
</span><span class='line'>)
</span><span class='line'>
</span><span class='line'>func main() {
</span><span class='line'>
</span><span class='line'>  wg := &sync.WaitGroup{}
</span><span class='line'>  wg.Add(1)
</span><span class='line'>
</span><span class='line'>  config := nsq.NewConfig()
</span><span class='line'>  q, _ := nsq.NewConsumer("write_test", "ch", config)
</span><span class='line'>  q.AddHandler(nsq.HandlerFunc(func(message *nsq.Message) error {
</span><span class='line'>      log.Printf("Got a message: %v", message)
</span><span class='line'>      wg.Done()
</span><span class='line'>      return nil
</span><span class='line'>  }))
</span><span class='line'>  err := q.ConnectToNSQD("127.0.0.1:4150")
</span><span class='line'>  if err != nil {
</span><span class='line'>      log.Panic("Could not connect")
</span><span class='line'>  }
</span><span class='line'>  wg.Wait()
</span><span class='line'>
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>and then run it with:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ go run main.go</span></code></pre></td></tr></table></div></figure>


<p>You should see output:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>2014/11/12 08:37:29 INF    1 [write_test/ch] (127.0.0.1:4150) connecting to nsqd
</span><span class='line'>2014/11/12 08:37:29 Got a message: &{[48 55 54 52 48 57 51 56 50 100 50 56 101 48 48 55] [116 101 115 116] 1415810020571836511 2 0xc208042118 0 0}</span></code></pre></td></tr></table></div></figure>


<p>Congratulations!  You just pushed a message through <strong>NSQ</strong>.</p>

<h2>Enhanced consumer: use NSQLookupd</h2>

<p>The above example hardcoded the ip of <code>nsqd</code> into the consumer code, which is not a best practice.  A better way to go about it is to point the consumer at <code>nsqlookupd</code>, which will transparently connect to the appropriate <code>nsqd</code> that happens to be publishing that topic.</p>

<p>In our example, we only have a single <code>nsqd</code>, so it&rsquo;s an extraneous lookup.  But it&rsquo;s good to get into the right habits early, especially if you are a <em>habitual copy/paster</em>.</p>

<p>The consumer example only needs a one-line change to get this enhancement:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>err := q.ConnectToNSQLookupd("127.0.0.1:4161")</span></code></pre></td></tr></table></div></figure>


<p>Which will connect to the HTTP port of <code>nsqlookupd</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CoreOS with Nvidia CUDA GPU drivers]]></title>
    <link href="http://tleyden.github.io/blog/2014/11/04/coreos-with-nvidia-cuda-gpu-drivers/"/>
    <updated>2014-11-04T07:08:00-08:00</updated>
    <id>http://tleyden.github.io/blog/2014/11/04/coreos-with-nvidia-cuda-gpu-drivers</id>
    <content type="html"><![CDATA[<p>This will walk you through installing the Nvidia GPU kernel module and CUDA drivers on a docker container running inside of CoreOS.</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/coreos-nvidia-gpu.png" alt="architecture diagram" /></p>

<h2>Launch CoreOS on an AWS GPU instance</h2>

<ul>
<li><p>Launch a new EC2 instance</p></li>
<li><p>Under &ldquo;Community AMIs&rdquo;, search for <strong>ami-7c8b3f14</strong> (CoreOS-stable-410.1.0-hvm)</p></li>
<li><p>Select the GPU instances: <strong>g2.2xlarge</strong></p></li>
<li><p>Increase root EBS store from 8 GB &ndash;> 20 GB to give yourself some breathing room</p></li>
</ul>


<h2>ssh into CoreOS instance</h2>

<p>Find the public ip of the EC2 instance launched above, and ssh into it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ssh -A core@ec2-54-80-24-46.compute-1.amazonaws.com</span></code></pre></td></tr></table></div></figure>


<h2>Run Ubuntu 12 docker container in privileged mode</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo docker run --privileged=true -i -t ubuntu:12.04 /bin/bash</span></code></pre></td></tr></table></div></figure>


<p>After the above command, you should be inside a root shell in your docker container.  The rest of the steps will assume this.</p>

<h2>Install build tools + other required packages</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ apt-get update
</span><span class='line'>$ apt-get install build-essential wget git</span></code></pre></td></tr></table></div></figure>


<h2>Prepare CoreOS kernel source</h2>

<p><strong>Clone CoreOS kernel repository</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkdir -p /usr/src/kernels
</span><span class='line'>$ cd /usr/src/kernels
</span><span class='line'>$ git clone https://github.com/coreos/linux.git</span></code></pre></td></tr></table></div></figure>


<p><strong>Get CoreOS kernel version</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ uname -a
</span><span class='line'>Linux ip-10-183-54-167.ec2.internal 3.15.8+ #2 SMP Fri Sep 26 08:37:17 UTC 2014 x86_64 Intel(R) Xeon(R) CPU E5-2670 0 @ 2.60GHz GenuineIntel GNU/Linux</span></code></pre></td></tr></table></div></figure>


<p>The CoreOS kernel version is <strong>3.15.8</strong></p>

<p><strong>Switch correct branch for this kernel version </strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd linux
</span><span class='line'>$ git checkout remotes/origin/coreos/v3.15.8</span></code></pre></td></tr></table></div></figure>


<p><strong>Create kernel configuration file</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ zcat /proc/config.gz &gt; /usr/src/kernels/linux/.config</span></code></pre></td></tr></table></div></figure>


<p><strong>Prepare kernel source for building modules</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd /usr/src/kernels/linux
</span><span class='line'>$ make modules_prepare</span></code></pre></td></tr></table></div></figure>


<p>Now you should be ready to install the nvidia driver.</p>

<h2>Install nvidia driver</h2>

<p><strong>Download</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkdir -p /opt/nvidia
</span><span class='line'>$ cd /opt/nvidia
</span><span class='line'>$ wget http://developer.download.nvidia.com/compute/cuda/6_5/rel/installers/cuda_6.5.14_linux_64.run</span></code></pre></td></tr></table></div></figure>


<p><strong>Unpack</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ chmod +x cuda_6.5.14_linux_64.run
</span><span class='line'>$ mkdir nvidia_installers
</span><span class='line'>$ ./cuda_6.5.14_linux_64.run -extract=`pwd`/nvidia_installers</span></code></pre></td></tr></table></div></figure>


<p><strong>Install</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd nvidia_installers
</span><span class='line'>$ ./NVIDIA-Linux-x86_64-340.29.run --kernel-source-path=/usr/src/kernels/linux/</span></code></pre></td></tr></table></div></figure>


<p><strong>Installer Questions</strong></p>

<ul>
<li>Install NVidia&rsquo;s 32-bit compatibility libraries? <strong>YES</strong></li>
<li>Would you like to run nvidia-xconfig? <strong>NO</strong></li>
</ul>


<p>If everything worked, you should see:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/nvidia_driver_installed.png" alt="nvidia drivers installed" /></p>

<h2>Load nvidia kernel module</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ modprobe nvidia</span></code></pre></td></tr></table></div></figure>


<p>No errors should be returned.  Verify it&rsquo;s loaded by running:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ lsmod | grep -i nvidia</span></code></pre></td></tr></table></div></figure>


<p>and you should see:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nvidia              10533711  0
</span><span class='line'>i2c_core               41189  2 nvidia,i2c_piix4</span></code></pre></td></tr></table></div></figure>


<h2>Install CUDA</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ./cuda-linux64-rel-6.5.14-18749181.run
</span><span class='line'>$ ./cuda-samples-linux-6.5.14-18745345.run</span></code></pre></td></tr></table></div></figure>


<h2>Verify CUDA</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd /usr/local/cuda/samples/1_Utilities/deviceQuery
</span><span class='line'>$ make
</span><span class='line'>$ ./deviceQuery   </span></code></pre></td></tr></table></div></figure>


<p>You should see the following output:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>deviceQuery, CUDA Driver = CUDART, CUDA Driver Version = 6.5, CUDA Runtime Version = 6.5, NumDevs = 1, Device0 = GRID K520
</span><span class='line'>Result = PASS</span></code></pre></td></tr></table></div></figure>


<p>Congratulations!  You now have a docker container running under CoreOS that can access the GPU.</p>

<h1>Appendix A: Using Core OS Alpha</h1>

<p>The instructions above were for an older version of CoreOS.  The following instructions are for Core OS Alpha, and might possibly work on the current version of CoreOS stable (444.5.0).  Only the parts that differ from above steps are listed:</p>

<h2>Launch CoreOS Alpha on an AWS GPU instance</h2>

<ul>
<li>Under &ldquo;Community AMIs&rdquo;, search for <strong>ami-66e6680e</strong> (CoreOS-alpha-490.0.0-hvm)</li>
</ul>


<h2>Run Ubuntu 14 docker container in privileged mode</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo docker run --privileged=true -i -t ubuntu:14.04 /bin/bash</span></code></pre></td></tr></table></div></figure>


<p>After the above command, you should be inside a root shell in your docker container.  The rest of the steps will assume this.</p>

<h2>Install build tools + other required packages</h2>

<p>In order to match the version of gcc that was used to build the CoreOS kernel.  (gcc 4.7)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ apt-get update
</span><span class='line'>$ apt-get install gcc-4.7 g++-4.7 wget git make dpkg-dev</span></code></pre></td></tr></table></div></figure>


<p><strong>Set gcc 4.7 as default</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ update-alternatives --remove gcc /usr/bin/gcc-4.8
</span><span class='line'>$ update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.7 60 --slave /usr/bin/g++ g++ /usr/bin/g++-4.7
</span><span class='line'>$ update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.8 40 --slave /usr/bin/g++ g++ /usr/bin/g++-4.8</span></code></pre></td></tr></table></div></figure>


<p><strong>Verify</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ update-alternatives --config gcc</span></code></pre></td></tr></table></div></figure>


<p>It should list gcc 4.7 with an asterisk next to it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>* 0            /usr/bin/gcc-4.7   60        auto mode</span></code></pre></td></tr></table></div></figure>


<h2>Prepare CoreOS kernel source</h2>

<p><strong>Get CoreOS kernel version</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ uname -a
</span><span class='line'>Linux ip-10-11-167-200.ec2.internal 3.17.2+ #2 SMP Tue Nov 4 04:15:48 UTC 2014 x86_64 Intel(R) Xeon(R) CPU E5-2670 0 @ 2.60GHz GenuineIntel GNU/Linux</span></code></pre></td></tr></table></div></figure>


<p>The CoreOS kernel version is <strong>3.17.2</strong></p>

<p><strong>Switch correct branch for this kernel version </strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd linux
</span><span class='line'>$ git checkout remotes/origin/coreos/v3.17.2</span></code></pre></td></tr></table></div></figure>


<h1>Appendix B: Expose GPU to other docker containers</h1>

<p>If you need <em>other</em> docker containers on this CoreOS instance to be able to access the GPU, you can do the following steps.</p>

<p><em>Note:</em> you need to be using CoreOS-alpha-490.0.0 or later, since this requires Docker 1.3 to work.</p>

<p><strong>Exit docker container</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ exit</span></code></pre></td></tr></table></div></figure>


<p>You should be back to your CoreOS shell.</p>

<p><strong>Add nvidia device nodes</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ wget https://gist.githubusercontent.com/tleyden/74f593a0beea300de08c/raw/95ed93c5751a989e58153db6f88c35515b7af120/nvidia_devices.sh
</span><span class='line'>$ chmod +x nvida_devices.sh
</span><span class='line'>$ sudo ./nvida_devices.sh</span></code></pre></td></tr></table></div></figure>


<p><strong>Verify device nodes</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ls -alh /dev | grep -i nvidia
</span><span class='line'>crw-rw-rw-  1 root root  251,   0 Nov  5 16:37 nvidia-uvm
</span><span class='line'>crw-rw-rw-  1 root root  195,   0 Nov  5 16:37 nvidia0
</span><span class='line'>crw-rw-rw-  1 root root  195, 255 Nov  5 16:37 nvidiactl</span></code></pre></td></tr></table></div></figure>


<p><strong>Launch docker containers</strong></p>

<p>When you launch other docker containers on the same CoreOS instance, to allow them to access the GPU device you will need to add the following arguments:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo docker run -ti --device /dev/nvidia0:/dev/nvidia0 --device /dev/nvidiactl:/dev/nvidiactl --device /dev/nvidia-uvm:/dev/nvidia-uvm tleyden5iwx/ubuntu-cuda /bin/bash</span></code></pre></td></tr></table></div></figure>


<p>A complete example is available in <a href="http://tleyden.github.io/blog/2014/10/25/docker-on-aws-gpu-ubuntu-14-dot-04-slash-cuda-6-dot-5/">Docker on AWS GPU Ubuntu 14.04 / CUDA 6.5</a>.  You can pick up at th <strong>Run GPU enabled docker image</strong> step.</p>

<h2>References</h2>

<ul>
<li><a href="https://groups.google.com/forum/#!topic/coreos-user/CSp_wSywmI4">https://groups.google.com/forum/#!topic/coreos-user/CSp_wSywmI4</a> &ndash; Thanks Сергей!</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running Couchbase Cluster Under CoreOS on AWS]]></title>
    <link href="http://tleyden.github.io/blog/2014/11/01/running-couchbase-cluster-under-coreos-on-aws/"/>
    <updated>2014-11-01T12:16:00-07:00</updated>
    <id>http://tleyden.github.io/blog/2014/11/01/running-couchbase-cluster-under-coreos-on-aws</id>
    <content type="html"><![CDATA[<p>Here are instructions on how to fire up a Couchbase Server 2.2 cluster running under CoreOS on AWS CloudFormation.  You will end up with the following system:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/couchbase-coreos-onion.png" alt="architecture diagram" /></p>

<h2>Launch CoreOS instances via AWS Cloud Formation</h2>

<p>Click the &ldquo;Launch Stack&rdquo; button to launch your CoreOS instances via AWS Cloud Formation:</p>

<p><a href="https://console.aws.amazon.com/cloudformation/home?region=us-east-1#cstack=sn%7ECouchbase-CoreOS%7Cturl%7Ehttp://tleyden-misc.s3.amazonaws.com/couchbase-coreos/coreos-stable-pv.template"><img src="https://s3.amazonaws.com/cloudformation-examples/cloudformation-launch-stack.png"></a></p>

<p><em>NOTE: this is hardcoded to use the us-east-1 region, so if you need a different region, you should edit the URL accordingly</em></p>

<p>Use the following parameters in the form:</p>

<ul>
<li><strong>ClusterSize</strong>: 3 nodes (default)</li>
<li><strong>Discovery URL</strong>:  as it says, you need to grab a new token from <a href="https://discovery.etcd.io/new">https://discovery.etcd.io/new</a> and paste it in the box.</li>
<li><strong>KeyPair</strong>:  use whatever you normally use to start EC2 instances.  For this discussion, let&rsquo;s assumed you used <code>aws</code>, which corresponds to a file you have on your laptop called <code>aws.cer</code></li>
</ul>


<h2>ssh into a CoreOS instance</h2>

<p>Go to the AWS console under EC2 instances and find the public ip of one of your newly launched CoreOS instances.</p>

<p>Choose any one of them (it doesn&rsquo;t matter which), and ssh into it as the <strong>core</strong> user with the cert provided in the previous step:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ssh -i aws.cer -A core@ec2-54-83-80-161.compute-1.amazonaws.com</span></code></pre></td></tr></table></div></figure>


<h2>Sanity check</h2>

<p>Let&rsquo;s make sure the CoreOS cluster is healthy first:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ fleetctl list-machines</span></code></pre></td></tr></table></div></figure>


<p>This should return a list of machines in the cluster, like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>MACHINE          IP              METADATA
</span><span class='line'>03b08680...     10.33.185.16    -
</span><span class='line'>209a8a2e...     10.164.175.9    -
</span><span class='line'>25dd84b7...     10.13.180.194   -</span></code></pre></td></tr></table></div></figure>


<h2>Download cluster-init script</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ wget https://raw.githubusercontent.com/tleyden/couchbase-server-coreos/master/2.2/scripts/cluster-init.sh
</span><span class='line'>$ chmod +x cluster-init.sh</span></code></pre></td></tr></table></div></figure>


<p>This script is not much.  I wrapped things up in a script because the instructions were getting long, but all it does is:</p>

<ul>
<li>Downloads a few fleet init files</li>
<li>Generates a few more fleet init files based on a template and the number of nodes you want.</li>
<li>Stashes the username/password argument you give it into <code>etcd</code></li>
<li>Tells <code>fleetctl</code> to kick everything off.  Whee!</li>
</ul>


<h2>Launch cluster</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ./cluster-init.sh -n 3 -u "user:passw0rd"</span></code></pre></td></tr></table></div></figure>


<p>Where:</p>

<ul>
<li><strong>-n</strong> the total number of couchbase nodes to start &mdash; should correspond to number of ec2 instances (eg, 3)</li>
<li><strong>-u</strong> the username and password as a single string, delimited by a colon (:)</li>
</ul>


<p>Replace <code>user:passw0rd</code> with a sensible username and password.  It <strong>must</strong> be colon separated, with no spaces.  The password itself must be at least 6 characters.</p>

<p>Once this command completes, your cluster will be in the process of launching.</p>

<h2>Verify</h2>

<p>To check the status of your cluster, run:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ fleetctl list-units</span></code></pre></td></tr></table></div></figure>


<p>You should see four units, all as active.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>UNIT                     MACHINE             ACTIVE  SUB
</span><span class='line'>couchbase_bootstrap_node.service                375d98b9.../10.63.168.35  active  running
</span><span class='line'>couchbase_bootstrap_node_announce.service       375d98b9.../10.63.168.35  active  running
</span><span class='line'>couchbase_node.1.service                        8cf54d4d.../10.187.61.136 active  running
</span><span class='line'>couchbase_node.2.service                        b8cf0ed6.../10.179.161.76 active  running</span></code></pre></td></tr></table></div></figure>


<h2>Rebalance Couchbase Cluster</h2>

<p><strong>Login to Couchbase Server Web Admin</strong></p>

<ul>
<li>Find the public ip of any of your CoreOS instances via the AWS console</li>
<li>In a browser, go to <code>http://&lt;instance_public_ip&gt;:8091</code></li>
<li>Login with the username/password you provided above</li>
</ul>


<p>After logging in, your Server Nodes tab should look like this:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/couchbase_admin_ui_prerebalance.png" alt="screenshot" /></p>

<p><strong>Kick off initial rebalance</strong></p>

<ul>
<li>Click server nodes</li>
<li>Click &ldquo;Rebalance&rdquo;</li>
</ul>


<p>After the rebalance is complete, you should see:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/couchbase_admin_ui_post_rebalance.png" alt="screenshot" /></p>

<p>Congratulations!  You now have a 3 node Couchbase Server cluster running under CoreOS / Docker.</p>

<h1>References</h1>

<ul>
<li><a href="https://gist.github.com/dustin/6605182">How I built couchbase 2.2 for docker</a> by <a href="https://twitter.com/dlsspy">@dlsspy</a></li>
<li><a href="https://github.com/tleyden/couchbase-server-coreos">https://github.com/tleyden/couchbase-server-coreos</a></li>
<li><a href="https://registry.hub.docker.com/u/ncolomer/couchbase/">https://registry.hub.docker.com/u/ncolomer/couchbase/</a></li>
<li><a href="https://github.com/lifegadget/docker-couchbase">https://github.com/lifegadget/docker-couchbase</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Goroutines vs Threads]]></title>
    <link href="http://tleyden.github.io/blog/2014/10/30/goroutines-vs-threads/"/>
    <updated>2014-10-30T06:28:00-07:00</updated>
    <id>http://tleyden.github.io/blog/2014/10/30/goroutines-vs-threads</id>
    <content type="html"><![CDATA[<p>Here are some of the advantages of Goroutines over threads:</p>

<ul>
<li>You can run more goroutines on a typical system than you can threads.</li>
<li>Goroutines have growable segmented stacks.</li>
<li>Goroutines have a faster startup time than threads.</li>
<li>Goroutines come with built-in primitives to communicate safely between themselves (channels).</li>
<li>Goroutines allow you to avoid having to resort to mutex locking when sharing data structures.</li>
<li>Goroutines are multiplexed onto a small number of OS threads, rather than a 1:1 mapping.</li>
<li>You can write massively concurrent servers withouth having to resort to evented programming.</li>
</ul>


<h2>You can run more of them</h2>

<p>On Java you can run 1000&rsquo;s or tens of 1000&rsquo;s threads.  On Go you can run hundreds of thousands or millions of goroutines.</p>

<p>Java threads map directly to OS threads, and are relatively heavyweight.  Part of the reason they are heavyweight is their rather large fixed stack size.  This caps the number of them you can run in a single VM due to the increasing memory overhead.</p>

<p>Go OTOH has a segmented stack that grows as needed.  They are &ldquo;Green threads&rdquo;, which means the Go runtime does the scheduling, not the OS.  The runtime multiplexes the goroutines onto real OS threads, the number of which is controlled by <code>GOMAXPROCS</code>.  Typically you&rsquo;ll want to set this to the number of cores on your system, to maximize potential parellelism.</p>

<h2>They let you avoid locking hell</h2>

<p>One of the biggest drawback of threaded programming is the complexity and brittleness of many codebases that use threads to achieve high concurrency.  There can be latent deadlocks and race conditions, and it can become near impossible to reason about the code.</p>

<p>Go OTOH gives you primitives that allow you to avoid locking completely.  The mantra is <em>don&rsquo;t communicate by sharing memory, share memory by communicating</em>.  In other words, if two goroutines need to share data, they can do so safely over a channel.  Go handles all of the synchronization for you, and it&rsquo;s much harder to run into things like deadlocks.</p>

<h2>No callback spaghetti, either</h2>

<p>There are other approaches to achieving high concurrency with a small number of threads.  Python Twisted was one of the early ones that got a lot of attention.  Node.js is currently the most prominent evented frameworks out there.</p>

<p>The problem with these evented frameworks is that the code complexity is also high, and difficult to reason about.  Rather than &ldquo;straightline&rdquo; coding, the programmer is forced to chain callbacks, which gets interleaved with error handling.  While refactoring can help tame some of the mental load, it&rsquo;s still an issue.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running Caffe on AWS GPU instance via Docker]]></title>
    <link href="http://tleyden.github.io/blog/2014/10/25/running-caffe-on-aws-gpu-instance-via-docker/"/>
    <updated>2014-10-25T20:42:00-07:00</updated>
    <id>http://tleyden.github.io/blog/2014/10/25/running-caffe-on-aws-gpu-instance-via-docker</id>
    <content type="html"><![CDATA[<p>This is a tutorial to help you get the <a href="http://caffe.berkeleyvision.org/">Caffe deep learning framework</a> up and running on a GPU-powered AWS instance running inside a Docker container.</p>

<h2>Architecture</h2>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/caffe_docker_aws_onion.png" alt="architecture diagram" /></p>

<h2>Setup host</h2>

<p>Before you can start your docker container, you will need to go <strong>deeper down the rabbit hole</strong>.</p>

<p>You&rsquo;ll first need to complete the steps here:</p>

<p><a href="http://tleyden.github.io/blog/2014/10/25/cuda-6-dot-5-on-aws-gpu-instance-running-ubuntu-14-dot-04/">Setting up an Ubuntu 14.04 box running on a GPU-enabled AWS instance</a></p>

<p>After you&rsquo;re done, you&rsquo;ll end up with a host OS with the following properties:</p>

<ul>
<li>A GPU enabled AWS instance running Ubuntu 14.04</li>
<li>Nvidia kernel module</li>
<li>Nvidia device drivers</li>
<li>CUDA 6.5 installed and verified</li>
</ul>


<h2>Install Docker</h2>

<p>Once your host OS is setup, you&rsquo;re ready to install docker.  (version 1.3 at the time of this writing)</p>

<p>Setup the key for the docker repo:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 36A1D7869245C8950F966E92D8576A8BA88D21E9</span></code></pre></td></tr></table></div></figure>


<p>Add the docker repo:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo sh -c "echo deb https://get.docker.com/ubuntu docker main &gt; /etc/apt/sources.list.d/docker.list"
</span><span class='line'>$ sudo apt-get update</span></code></pre></td></tr></table></div></figure>


<p>Install docker:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo apt-get install lxc-docker</span></code></pre></td></tr></table></div></figure>


<h2>Run the docker container</h2>

<p><strong>Find your nvidia devices</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ls -la /dev | grep nvidia</span></code></pre></td></tr></table></div></figure>


<p>You should see:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>crw-rw-rw-  1 root root    195,   0 Oct 25 19:37 nvidia0
</span><span class='line'>crw-rw-rw-  1 root root    195, 255 Oct 25 19:37 nvidiactl
</span><span class='line'>crw-rw-rw-  1 root root    251,   0 Oct 25 19:37 nvidia-uvm</span></code></pre></td></tr></table></div></figure>


<p>You&rsquo;ll have to adapt the <code>DOCKER_NVIDIA_DEVICES</code> variable below to match your particular devices.</p>

<p>Here&rsquo;s how to start the docker container:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ DOCKER_NVIDIA_DEVICES="--device /dev/nvidia0:/dev/nvidia0 --device /dev/nvidiactl:/dev/nvidiactl --device /dev/nvidia-uvm:/dev/nvidia-uvm"
</span><span class='line'>$ sudo docker run -ti $DOCKER_NVIDIA_DEVICES tleyden5iwx/caffe-gpu /bin/bash</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s a large docker image, so this might take a few minutes, depending on your network connection.</p>

<h2>Run caffe test suite</h2>

<p>After the above <code>docker run</code> command completes, your shell will now be inside a docker container that has Caffe installed.</p>

<p>You&rsquo;ll want run the Caffe test suite and make sure it passes.  This will validate your environment, including your GPU drivers.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd /opt/caffe
</span><span class='line'>$ make test && make runtest</span></code></pre></td></tr></table></div></figure>


<p><strong>Expected Result:</strong> <code>... [  PASSED  ] 838 tests.</code></p>

<h2>Run the MNIST LeNet example</h2>

<p>A more comprehensive way to verify your environment is to train the MNIST LeNet example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd /opt/caffe/data/mnist
</span><span class='line'>$ ./get_mnist.sh
</span><span class='line'>$ cd /opt/caffe
</span><span class='line'>$ ./examples/mnist/create_mnist.sh
</span><span class='line'>$ ./examples/mnist/train_lenet.sh</span></code></pre></td></tr></table></div></figure>


<p>This will take a few minutes.</p>

<p><strong>Expected output:</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>libdc1394 error: Failed to initialize libdc1394 
</span><span class='line'>I1018 17:02:23.552733    66 caffe.cpp:90] Starting Optimization 
</span><span class='line'>I1018 17:02:23.553583    66 solver.cpp:32] Initializing solver from parameters:
</span><span class='line'>... lots of output ...
</span><span class='line'>I1018 17:17:58.684598    66 caffe.cpp:102] Optimization Done.</span></code></pre></td></tr></table></div></figure>


<p>Congratulations, you&rsquo;ve got GPU-powered Caffe running in a docker container &mdash; celebrate with a cup of <a href="http://www.yelp.com/biz/philz-coffee-berkeley-2">Philz</a>!</p>

<h1>References</h1>

<ul>
<li><a href="https://registry.hub.docker.com/u/tleyden5iwx/caffe-gpu">tleyden5iwx/caffe-gpu</a> Caffe Docker image (GPU)</li>
<li><a href="https://registry.hub.docker.com/u/tleyden5iwx/caffe">tleyden5iwx/caffe</a> Caffe Docker image (CPU-only)</li>
<li><a href="http://tleyden.github.io/blog/2014/10/25/cuda-6-dot-5-on-aws-gpu-instance-running-ubuntu-14-dot-04/">Docker on AWS GPU Ubuntu 14.04 / CUDA 6.5</a></li>
<li><a href="http://tleyden.github.io/blog/2014/10/25/cuda-6-dot-5-on-aws-gpu-instance-running-ubuntu-14-dot-04/">CUDA 6.5 on AWS GPU Instance Running Ubuntu 14.04</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker on AWS GPU Ubuntu 14.04 / CUDA 6.5]]></title>
    <link href="http://tleyden.github.io/blog/2014/10/25/docker-on-aws-gpu-ubuntu-14-dot-04-slash-cuda-6-dot-5/"/>
    <updated>2014-10-25T13:25:00-07:00</updated>
    <id>http://tleyden.github.io/blog/2014/10/25/docker-on-aws-gpu-ubuntu-14-dot-04-slash-cuda-6-dot-5</id>
    <content type="html"><![CDATA[<h2>Architecture</h2>

<p>After going through the steps in this blog post, you&rsquo;ll end up with this:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/docker_gpu_aws_onion.png" alt="architecture diagram" /></p>

<h2>Setup host</h2>

<p>Before you can start your docker container, you will need to go <strong>deeper down the rabbit hole</strong>.</p>

<p>You&rsquo;ll first need to complete the steps here:</p>

<p><a href="http://tleyden.github.io/blog/2014/10/25/cuda-6-dot-5-on-aws-gpu-instance-running-ubuntu-14-dot-04/">Setting up an Ubuntu 14.04 box running on a GPU-enabled AWS instance</a></p>

<p>After you&rsquo;re done, you&rsquo;ll end up with a host OS with the following properties:</p>

<ul>
<li>A GPU enabled AWS instance running Ubuntu 14.04</li>
<li>Nvidia kernel module</li>
<li>Nvidia device drivers</li>
<li>CUDA 6.5 installed and verified</li>
</ul>


<h2>Install Docker</h2>

<p>Once your host OS is setup, you&rsquo;re ready to install docker.  (version 1.3 at the time of this writing)</p>

<p>Setup the key for the docker repo:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 36A1D7869245C8950F966E92D8576A8BA88D21E9</span></code></pre></td></tr></table></div></figure>


<p>Add the docker repo:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo sh -c "echo deb https://get.docker.com/ubuntu docker main &gt; /etc/apt/sources.list.d/docker.list"
</span><span class='line'>$ sudo apt-get update</span></code></pre></td></tr></table></div></figure>


<p>Install docker:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo apt-get install lxc-docker</span></code></pre></td></tr></table></div></figure>


<h2>Run GPU enabled docker image</h2>

<p><strong>Find all your nvidia devices</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ls -la /dev | grep nvidia</span></code></pre></td></tr></table></div></figure>


<p>You should see:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>crw-rw-rw-  1 root root    195,   0 Oct 25 19:37 nvidia0
</span><span class='line'>crw-rw-rw-  1 root root    195, 255 Oct 25 19:37 nvidiactl
</span><span class='line'>crw-rw-rw-  1 root root    251,   0 Oct 25 19:37 nvidia-uvm</span></code></pre></td></tr></table></div></figure>


<p><strong>Launch docker container</strong></p>

<p>The easiest way to get going is to use this pre-built <a href="https://registry.hub.docker.com/u/tleyden5iwx/ubuntu-cuda/">docker image</a> that has the cuda drivers pre-installed.  Or if you want to build your own, <a href="https://registry.hub.docker.com/u/tleyden5iwx/ubuntu-cuda/dockerfile/">the accompanying dockerfile</a> will be a useful starting point.</p>

<p>You&rsquo;ll have to adapt the <code>DOCKER_NVIDIA_DEVICES</code> variable below to match your particular devices.</p>

<p>To start the docker container, run:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ DOCKER_NVIDIA_DEVICES="--device /dev/nvidia0:/dev/nvidia0 --device /dev/nvidiactl:/dev/nvidiactl --device /dev/nvidia-uvm:/dev/nvidia-uvm"
</span><span class='line'>$ sudo docker run -ti $DOCKER_NVIDIA_DEVICES tleyden5iwx/ubuntu-cuda /bin/bash</span></code></pre></td></tr></table></div></figure>


<p>After running the above command, you should be at a shell inside your docker container:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@1149788c731c:# </span></code></pre></td></tr></table></div></figure>


<h2>Verify CUDA access from inside the docker container</h2>

<p><strong>Install CUDA samples</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd /opt/nvidia_installers
</span><span class='line'>$ ./cuda-samples-linux-6.5.14-18745345.run -noprompt -cudaprefix=/usr/local/cuda-6.5/</span></code></pre></td></tr></table></div></figure>


<p><strong>Build deviceQuery sample</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd /usr/local/cuda/samples/1_Utilities/deviceQuery
</span><span class='line'>$ make
</span><span class='line'>$ ./deviceQuery   </span></code></pre></td></tr></table></div></figure>


<p><strong>You should see the following output</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>deviceQuery, CUDA Driver = CUDART, CUDA Driver Version = 6.5, CUDA Runtime Version = 6.5, NumDevs = 1, Device0 = GRID K520
</span><span class='line'>Result = PASS</span></code></pre></td></tr></table></div></figure>


<h2>References</h2>

<ul>
<li><a href="https://registry.hub.docker.com/u/tleyden5iwx/ubuntu-cuda/">https://registry.hub.docker.com/u/tleyden5iwx/ubuntu-cuda/</a></li>
<li><a href="http://stackoverflow.com/questions/25185405/using-gpu-from-a-docker-container">http://stackoverflow.com/questions/25185405/using-gpu-from-a-docker-container</a></li>
<li><a href="http://docs.docker.com/installation/ubuntulinux/#ubuntu-trusty-1404-lts-64-bit">http://docs.docker.com/installation/ubuntulinux/#ubuntu-trusty-1404-lts-64-bit</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CUDA 6.5 on AWS GPU instance running Ubuntu 14.04]]></title>
    <link href="http://tleyden.github.io/blog/2014/10/25/cuda-6-dot-5-on-aws-gpu-instance-running-ubuntu-14-dot-04/"/>
    <updated>2014-10-25T11:56:00-07:00</updated>
    <id>http://tleyden.github.io/blog/2014/10/25/cuda-6-dot-5-on-aws-gpu-instance-running-ubuntu-14-dot-04</id>
    <content type="html"><![CDATA[<h2>Using a pre-built public AMI</h2>

<p>Based on the instructions in this blog post, I&rsquo;ve created an AMI and shared it publicly.  So the easiest thing to do is just use that pre-built AMI:</p>

<ul>
<li>Image: ami-2cbf3e44 (Ubuntu Server 14.04 LTS (HVM) &ndash; CUDA 6.5)</li>
<li>Instance type: g2.2xlarge</li>
<li>Storage: Use at least 8 GB, 20+ GB recommended</li>
</ul>


<p>If you use the pre-built AMI, then you can skip the rest of this article, since all of these steps are &ldquo;baked in&rdquo; to the AMI.</p>

<h2>Building from scratch</h2>

<p>Or if you prefer to build your own instance from scratch, keep reading.</p>

<p>Create a new EC2 instance:</p>

<ul>
<li>Image: ami-9eaa1cf6 (Ubuntu Server 14.04 LTS (HVM), SSD Volume Type)</li>
<li>Instance type: g2.2xlarge</li>
<li>Storage: Use at least 8 GB, 20+ GB recommended</li>
</ul>


<p>Install build-essential:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ apt-get update && apt-get install build-essential</span></code></pre></td></tr></table></div></figure>


<p>Get CUDA installer:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ wget http://developer.download.nvidia.com/compute/cuda/6_5/rel/installers/cuda_6.5.14_linux_64.run</span></code></pre></td></tr></table></div></figure>


<p>Extract CUDA installer:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ chmod +x cuda_6.5.14_linux_64.run
</span><span class='line'>$ mkdir nvidia_installers
</span><span class='line'>$ ./cuda_6.5.14_linux_64.run -extract=`pwd`/nvidia_installers</span></code></pre></td></tr></table></div></figure>


<p>Run Nvidia driver installer:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd nvidia_installers
</span><span class='line'>$ ./NVIDIA-Linux-x86_64-340.29.run</span></code></pre></td></tr></table></div></figure>


<p>At this point it will popup an 8-bit UI that will ask you to accept a license agreement, and then start installing.</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/install_cuda.png" alt="screenshot" /></p>

<p>At this point, I got an error:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Unable to load the kernel module 'nvidia.ko'.  This happens most frequently when this kernel module was built against the wrong or
</span><span class='line'>         improperly configured kernel sources, with a version of gcc that differs from the one used to build the target kernel, or if a driver
</span><span class='line'>         such as rivafb, nvidiafb, or nouveau is present and prevents the NVIDIA kernel module from obtaining ownership of the NVIDIA graphics
</span><span class='line'>         device(s), or no NVIDIA GPU installed in this system is supported by this NVIDIA Linux graphics driver release.
</span><span class='line'>
</span><span class='line'>         Please see the log entries 'Kernel module load error' and 'Kernel messages' at the end of the file '/var/log/nvidia-installer.log'
</span><span class='line'>         for more information.</span></code></pre></td></tr></table></div></figure>


<p>After <a href="https://devtalk.nvidia.com/default/topic/547588/error-installing-nvidia-drivers-on-x86_64-amazon-ec2-gpu-cluster-t20-gpu-/">reading this forum post</a> I installed:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo apt-get install linux-image-extra-virtual</span></code></pre></td></tr></table></div></figure>


<p>When it prompted me what do to about the grub changes, I chose &ldquo;choose package maintainers version&rdquo;.</p>

<p>Reboot:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ reboot</span></code></pre></td></tr></table></div></figure>


<h2>Disable nouveau</h2>

<p>At this point you need to disable nouveau, since it conflicts with the nvidia kernel module.</p>

<p>Open a new file</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vi /etc/modprobe.d/blacklist-nouveau.conf</span></code></pre></td></tr></table></div></figure>


<p>and add these lines to it</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>blacklist nouveau
</span><span class='line'>blacklist lbm-nouveau
</span><span class='line'>options nouveau modeset=0
</span><span class='line'>alias nouveau off
</span><span class='line'>alias lbm-nouveau off</span></code></pre></td></tr></table></div></figure>


<p>and then save the file.</p>

<p>Disable the Kernel Nouveau:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ echo options nouveau modeset=0 | sudo tee -a /etc/modprobe.d/nouveau-kms.conf</span></code></pre></td></tr></table></div></figure>


<p>Reboot:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ update-initramfs -u
</span><span class='line'>$ reboot</span></code></pre></td></tr></table></div></figure>


<h2>One more try &mdash; this time it works</h2>

<p>Get Kernel source:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ apt-get install linux-source
</span><span class='line'>$ apt-get install linux-headers-3.13.0-37-generic
</span></code></pre></td></tr></table></div></figure>


<p>Rerun Nvidia driver installer:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd nvidia_installers
</span><span class='line'>$ ./NVIDIA-Linux-x86_64-340.29.run</span></code></pre></td></tr></table></div></figure>


<p>Load nvidia kernel module:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ modprobe nvidia</span></code></pre></td></tr></table></div></figure>


<p>Run CUDA + samples installer:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ./cuda-linux64-rel-6.5.14-18749181.run
</span><span class='line'>$ ./cuda-samples-linux-6.5.14-18745345.run</span></code></pre></td></tr></table></div></figure>


<h2>Verify CUDA is correctly installed</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd /usr/local/cuda/samples/1_Utilities/deviceQuery
</span><span class='line'>$ make
</span><span class='line'>$ ./deviceQuery   </span></code></pre></td></tr></table></div></figure>


<p>You should see the following output:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>deviceQuery, CUDA Driver = CUDART, CUDA Driver Version = 6.5, CUDA Runtime Version = 6.5, NumDevs = 1, Device0 = GRID K520
</span><span class='line'>Result = PASS</span></code></pre></td></tr></table></div></figure>


<h2>References</h2>

<ul>
<li><a href="http://www.r-tutor.com/gpu-computing/cuda-installation/cuda6.5-ubuntu">http://www.r-tutor.com/gpu-computing/cuda-installation/cuda6.5-ubuntu</a></li>
<li><a href="http://askubuntu.com/questions/451672/installing-and-testing-cuda-in-ubuntu-14-04">http://askubuntu.com/questions/451672/installing-and-testing-cuda-in-ubuntu-14-04</a></li>
<li><a href="https://devtalk.nvidia.com/default/topic/547588/error-installing-nvidia-drivers-on-x86_64-amazon-ec2-gpu-cluster-t20-gpu-/">https://devtalk.nvidia.com/default/topic/547588/error-installing-nvidia-drivers-on-x86_64-amazon-ec2-gpu-cluster-t20-gpu-/</a></li>
<li><a href="https://devtalk.nvidia.com/default/topic/769719/drm-ko-missing-on-ubuntu-14-04-1-lts-aws-ec2-g2-2xlarge-instance/">https://devtalk.nvidia.com/default/topic/769719/drm-ko-missing-on-ubuntu-14-04-1-lts-aws-ec2-g2-2xlarge-instance/</a></li>
<li><a href="http://askubuntu.com/questions/451221/ubuntu-14-04-install-nvidia-driver">http://askubuntu.com/questions/451221/ubuntu-14-04-install-nvidia-driver</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debugging into Android source]]></title>
    <link href="http://tleyden.github.io/blog/2014/09/10/debugging-into-android-source/"/>
    <updated>2014-09-10T15:57:00-07:00</updated>
    <id>http://tleyden.github.io/blog/2014/09/10/debugging-into-android-source</id>
    <content type="html"><![CDATA[<p>Debugging into the core Android source code can be useful.  Here&rsquo;s how to do it in Android Studio 0.8.2.</p>

<p>Starting out, if we hit a breakpoint where we have a sqlite database object:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/outside_db_breakpoint.png" alt="screenshot" /></p>

<p>And if you step in, you get this, which isn&rsquo;t very useful:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/inside_db_breakpoint.png" alt="screenshot" /></p>

<p>To fix that, go to Android SDK, find the API level you are using, and check the Sources for Android SDK box.</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/android_sdk.png" alt="screenshot" /></p>

<p><strong>You must restart Android Studio at this point</strong></p>

<p>Did you restart Android Studio?  Now re-run your app in the debugger, and when you try to step into the <code>database.execSQL()</code> method, you should see this:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/db_source_breakpoint.png" alt="screenshot" /></p>

<p>It worked!  Now you can debug into any Android code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running Couchbase Sync Gateway on Google Compute Engine]]></title>
    <link href="http://tleyden.github.io/blog/2014/06/22/running-couchbase-sync-gateway-on-gce/"/>
    <updated>2014-06-22T19:10:00-07:00</updated>
    <id>http://tleyden.github.io/blog/2014/06/22/running-couchbase-sync-gateway-on-gce</id>
    <content type="html"><![CDATA[<p>First, a quick refresh of what Couchbase Sync Gateway actually <em>is</em>.</p>

<p>So here&rsquo;s a birds-eye-view of the <a href="http://developer.couchbase.com/mobile">Couchbase Mobile</a> architecture:</p>

<p><img src="https://camo.githubusercontent.com/c1aa705fde3eb12245c06730d850c23e5a84ad8d/687474703a2f2f746c657964656e2d6d6973632e73332e616d617a6f6e6177732e636f6d2f636f756368626173652d6c6974652f636f756368626173652d6c6974652d6172636869746563747572652e706e67" alt="diagram" /></p>

<p>Sync Gateway allows Couchbase Lite mobile apps to sync data between each other and the Couchbase Server running on the backend.</p>

<p>This blog post will walk you through how to run Sync Gateway in a Docker container on Google Compute Engine.</p>

<h2>Create GCE instance and ssh in</h2>

<p>Follow the instructions on <a href="http://docs.docker.com/installation/google/">Running Docker on Google Compute Engine</a>.</p>

<p>At this point you should be ssh&rsquo;d into your GCE instance</p>

<h2>Create a configuration JSON</h2>

<p>Here&rsquo;s a sample <a href="https://gist.github.com/tleyden/d97d985eb1e0725e858e">example JSON configuration</a> for Sync Gateway which uses <a href="https://github.com/couchbaselabs/walrus">walrus</a> as it&rsquo;s backing store, rather than Couchbase Server.  Later we will swap in Couchbase Server as a backing store.</p>

<h2>Run Sync Gateway docker container</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gce:~$ sudo docker run -d -name sg -p 4984:4984 -p 4985:4985 tleyden5iwx/couchbase-sync-gateway sync_gateway "https://gist.githubusercontent.com/tleyden/d97d985eb1e0725e858e/raw"</span></code></pre></td></tr></table></div></figure>


<p>This will return a container id, eg <code>8ffb83fd1f</code>.</p>

<p>Check the logs to make sure there are no serious errors in the logs:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gce:~$ sudo docker logs 8ffb83fd1f</span></code></pre></td></tr></table></div></figure>


<p>You should see something along the lines of:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>02:23:58.905587 Enabling logging: [REST]
</span><span class='line'>02:23:58.905818 ==== Couchbase Sync Gateway/1.00 (unofficial) ====
</span><span class='line'>02:23:58.905863 Opening db /sync_gateway as bucket "sync_gateway", pool "default", server &lt;walrus:/opt/sync_gateway/data&gt;
</span><span class='line'>02:23:58.905964 Opening Walrus database sync_gateway on &lt;walrus:/opt/sync_gateway/data&gt;
</span><span class='line'>02:23:58.909659 Starting admin server on :4985
</span><span class='line'>02:23:58.913260 Starting server on :4984 ...</span></code></pre></td></tr></table></div></figure>


<h2>Expose API port 4984 via Firewall rule</h2>

<p>On your workstation with the <code>gcloud</code> tool installed, run:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gcloud compute firewalls create sg-4984 --allow tcp:4984</span></code></pre></td></tr></table></div></figure>


<h2>Verify that it&rsquo;s running</h2>

<h3>Find out external ip address of instance</h3>

<p>On your workstation with the <code>gcloud</code> tool installed, run:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gcloud compute instances list
</span><span class='line'>name     status  zone          machineType internalIP   externalIP
</span><span class='line'>couchbse RUNNING us-central1-a f1-micro    10.240.74.44 142.222.178.49</span></code></pre></td></tr></table></div></figure>


<p>Your external ip is listed under the externalIP column, eg <code>142.222.178.49</code> in this example.</p>

<h3>Run curl request</h3>

<p>On your workstation, replace the ip below with your own ip, and run:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl http://142.222.178.49:4984</span></code></pre></td></tr></table></div></figure>


<p>You should get a response like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{"couchdb":"Welcome","vendor":{"name":"Couchbase Sync Gateway","version":1},"version":"Couchbase Sync Gateway/1.00 (unofficial)"}</span></code></pre></td></tr></table></div></figure>


<h2>Re-run it with Couchbase Server backing store</h2>

<p><em>OK, so we&rsquo;ve gotten it working with walrus.  But have you looked at the walrus website lately?  One <a href="https://camo.githubusercontent.com/1bd1955b96628260b27320f099aeac0585229c2f/687474703a2f2f7777772e69686173616275636b65742e636f6d2f696d616765732f77616c7275735f6275636b65742e6a7067">click</a> and it&rsquo;s pretty obvious that this thing is not exactly meant to be a scalable production ready backend, nor has it ever claimed to be.</em></p>

<p>Let&rsquo;s dump walrus for now and use Couchbase Server from this point onwards.</p>

<h3>Start Couchbase Server</h3>

<p>Before moving on, you will need to go through the instructions in <a href="http://tleyden.github.io/blog/2014/06/22/running-couchbase-server-on-gce/">Running Couchbase Server on GCE</a> in order to get a Couchbase Server instance running.</p>

<h3>Stop Sync Gateway</h3>

<p>Run this command to stop the Sync Gateway container and completely remove it, using the same container id you used earlier:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gce:~$ sudo docker stop 8ffb83fd1f && sudo docker rm 8ffb83fd1f</span></code></pre></td></tr></table></div></figure>


<h3>Update config</h3>

<p>Copy this <a href="https://gist.github.com/tleyden/c9e6396f7183c0f3e28c">example JSON configuration</a>, which expects a Couchbase Server running on <code>http://172.17.0.2:8091</code>, and update it with the ip address of the docker instance where your Couchbase Server is running.  To get this ip address, follow the <a href="http://tleyden.github.io/blog/2014/06/22/running-couchbase-server-on-gce/">these instructions</a> in the &ldquo;Find the Docker instance IP address&rdquo; section.</p>

<p>Now upload your modified JSON configuration to a website that is publicly accessible, for example in a <a href="http://gist.github.com">Github Gist</a>.</p>

<h3>Run Sync Gateway</h3>

<p>Run Sync Gateway again, this time using Couchbase Server as a backing store this time.</p>

<p>Replace <code>http://yourserver.co/yourconfig.json</code> with the URL where you&rsquo;ve uploaded your JSON configuration from the previous step.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gce:~$ sudo docker run -d -name sg -p 4984:4984 -p 4985:4985 tleyden5iwx/couchbase-sync-gateway sync_gateway "http://yourserver.co/yourconfig.json"</span></code></pre></td></tr></table></div></figure>


<p>This will return a container id, eg <code>9ffb83fd1f</code>.  Again, check the logs to make sure there are no serious errors in the logs:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gce:~$ sudo docker logs 9ffb83fd1f</span></code></pre></td></tr></table></div></figure>


<p>You should see something along the lines of:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>... 
</span><span class='line'>02:23:58.913260 Starting server on :4984 ...</span></code></pre></td></tr></table></div></figure>


<p>with no errors.</p>

<h2>Verify it&rsquo;s working</h2>

<h3>Save a document via curl</h3>

<p>The easiest way to add a document is via the Admin port, since there is no authentication to worry about.  Since we haven&rsquo;t added a firewall rule to expose the admin port (4985), (and doing so without tight filtering would be a major security hole), the following command to create a new document must be run on the GCE instance.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gce:~$ curl -H "Content-Type: application/json" -d '{"such":"json"}' http://localhost:4985/sync_gateway/</span></code></pre></td></tr></table></div></figure>


<p>If it worked, you should see a response like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{"id":"3cbfbe43e76b7eb5c4c221a78b2cf0cc","ok":true,"rev":"1-cd809becc169215072fd567eebd8b8de"}</span></code></pre></td></tr></table></div></figure>


<h3>View document on Couchbase Server</h3>

<p>To verify the document was successfully stored on Couchbase Server, you&rsquo;ll need to login to the Couchbase Server Web Admin UI.  There are instructions <a href="http://tleyden.github.io/blog/2014/06/22/running-couchbase-server-on-gce/">here</a> on how to do that.</p>

<p>From there, navigate to Data Buckets / default / Documents, and you should see:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/couchbase_server_docs.png" alt="screenshot" /></p>

<p>Click on the document that has a UUID (eg, &ldquo;29f8d7..&rdquo; in the screenshot above), and you should see the document&rsquo;s contents:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/couchbase_server_doc.png" alt="screenshot" /></p>

<p>The <code>_sync</code> metadata field is used internally by the Sync Gateway and can be ignored.  The actual doc contents are towards the end of the file: <code>.."such":"json"}</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running a Couchbase Cluster on Google Compute Engine]]></title>
    <link href="http://tleyden.github.io/blog/2014/06/22/running-couchbase-server-on-gce/"/>
    <updated>2014-06-22T15:52:00-07:00</updated>
    <id>http://tleyden.github.io/blog/2014/06/22/running-couchbase-server-on-gce</id>
    <content type="html"><![CDATA[<p>The easiest way to run Couchbase cluster on Google Compute Engine is to run all of the nodes in Docker containers.</p>

<h2>Create GCE instance and ssh in</h2>

<p>Follow the instructions on <a href="http://docs.docker.com/installation/google/">Running Docker on Google Compute Engine</a>.</p>

<p>At this point you should be ssh&rsquo;d into your GCE instance</p>

<h2>Increase max number of files limit</h2>

<p>If you try to run Couchbase Server at this point, you will get <a href="http://stackoverflow.com/questions/24356815/running-couchbase-under-gce-docker-and-getting-error-about-max-number-of-files">this warning</a> because the file ulimit is too low.</p>

<p>Here&rsquo;s how to fix it:</p>

<ul>
<li>Edit <code>/etc/default/docker</code></li>
<li>Add a new line in the file with:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ulimit -n 262144</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Restart the GCE instance in the GCE web admin by going to Compute Engine / VM Instances / <your instance> and hitting the &ldquo;Reboot&rdquo; button.</li>
</ul>


<p><em>Note: in theory it should be possible to just restart docker via <code>sudo service docker restart</code>, however this didn&rsquo;t work for me when I tried it, so I ended up restarting the whole GCE instance</em></p>

<h2>Start Couchbase Server</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gce:~$ sudo docker run -d -name cb1 -p 8091:8091 -p 8092:8092 -p 11210:11210 -p 11211:11211 ncolomer/couchbase</span></code></pre></td></tr></table></div></figure>


<h2>Verify it&rsquo;s running</h2>

<h3>Find the Docker instance IP address</h3>

<p>On the GCE instance, run:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gce:~$ sudo docker inspect -format '{{ .NetworkSettings.IPAddress }}' cb1</span></code></pre></td></tr></table></div></figure>


<p>This should return an ip address, eg <code>172.17.0.2</code></p>

<p>Set it as an environment variable so we can use it in later steps:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gce:~$ export CB1_IP=172.17.0.2</span></code></pre></td></tr></table></div></figure>


<h3>Run couchbase-cli</h3>

<p>To verify that couchbase server is running, use the <code>couchbase-cli</code> to ask for server info:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gce:~$ sudo docker run -rm ncolomer/couchbase couchbase-cli server-info -c ${CB1_IP} -u Administrator -p couchbase</span></code></pre></td></tr></table></div></figure>


<p>If everything is working correctly, this should return a json response, eg:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "availableStorage": {
</span><span class='line'>    "hdd": [
</span><span class='line'>      {
</span><span class='line'>        "path": "/",
</span><span class='line'>  ...
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>Start a 3-node cluster</h2>

<p>On the GCE instance, run the following commands:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gce:~$ sudo docker run -d -name cb2 ncolomer/couchbase couchbase-start ${CB1_IP}
</span><span class='line'>gce:~$ sudo docker run -d -name cb3 ncolomer/couchbase couchbase-start ${CB1_IP}</span></code></pre></td></tr></table></div></figure>


<p>The nodes <code>cb2</code> and <code>cb3</code> will automatically join the cluster via <code>cb1</code>. The cluster needs a rebalance to be fully operational. To do so, run the following command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gce:~$ sudo docker run -rm ncolomer/couchbase couchbase-cli rebalance -c ${CB1_IP} -u Administrator -p couchbase</span></code></pre></td></tr></table></div></figure>


<h2>Connect to admin web UI</h2>

<p>The easiest way to manage a Couchbase Server cluster is via the built-in Web Admin UI.</p>

<p>In order to access it, we will need to make some network changes.</p>

<h3>Expose port 8091 via firewall rule for your machine</h3>

<p>Go to <a href="http://www.whatismyip.com/">whatismyip.com</a> or equivalent, and find your ip address.  Eg, <code>67.161.66.7</code></p>

<p>On your workstation with the <code>gcloud</code> tool installed, run:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gcloud compute firewalls create cb-8091 --allow tcp:8091 --source-ranges 67.161.66.7/32</span></code></pre></td></tr></table></div></figure>


<p>This will allow your machine, as well any other machine behind your internet router, to connect to the Couchbase Web UI running on GCE.</p>

<p>To increase security, you should use ipv6 and pass your workstation&rsquo;s ipv6 hostname in the <code>--source-ranges</code> parameter.</p>

<h3>Find out external ip address of instance</h3>

<p>On your workstation with the <code>gcloud</code> tool installed, run:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gcloud compute instances list
</span><span class='line'>name     status  zone          machineType internalIP   externalIP
</span><span class='line'>couchbse RUNNING us-central1-a f1-micro    10.240.74.44 142.222.178.49</span></code></pre></td></tr></table></div></figure>


<p>Your external ip is listed under the externalIP column, eg <code>142.222.178.49</code> in this example.</p>

<h3>Go to admin in web browser</h3>

<p>Go to <a href="http://142.222.178.49:8091">http://142.222.178.49:8091</a> into your web browser (replacing w/ your external ip)</p>

<p>You should see a screen like this:</p>

<p><img src="http://cl.ly/image/2m1i01192U0G/Screen%20Shot%202014-06-22%20at%207.07.36%20PM.png" alt="screenshot" /></p>

<p>Login with the default credentials:</p>

<ul>
<li>Username: Administrator</li>
<li>Password: couchbase</li>
</ul>


<p>And you should see the Web Admin dashboard:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/couchbase_dashboard.png" alt="screenshot" /></p>

<h2>Increase default bucket size</h2>

<p>The default bucket size is set to a very low number by default (128M in my case).  To increase this:</p>

<ul>
<li>In Web Admin UI, go to Data Buckets / Default / Edit</li>
<li>Change Per Node RAM Quota to 1024 MB</li>
<li>Hit &ldquo;Save&rdquo; button</li>
</ul>


<h2>References</h2>

<ul>
<li><a href="https://registry.hub.docker.com/u/ncolomer/couchbase/">ncolomer/couchbase Docker instructions</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configure Emacs as a Go Editor From Scratch Part 2]]></title>
    <link href="http://tleyden.github.io/blog/2014/05/27/configure-emacs-as-a-go-editor-from-scratch-part-2/"/>
    <updated>2014-05-27T12:03:00-07:00</updated>
    <id>http://tleyden.github.io/blog/2014/05/27/configure-emacs-as-a-go-editor-from-scratch-part-2</id>
    <content type="html"><![CDATA[<p>This is a continuation of <a href="http://tleyden.github.io/blog/2014/05/22/configure-emacs-as-a-go-editor-from-scratch/">Part 1</a>, so if you haven&rsquo;t read that already, you should do so now.</p>

<h2>goimports</h2>

<p>The idea of goimports is that every time you save a file, it will automatically update all of your imports, so you don&rsquo;t have to.  This can save a lot of time.  Kudos to <a href="https://twitter.com/bradfitz">@bradfitz</a> for taking the time to build this nifty tool.</p>

<p>Since this project is hosted on Google Code&rsquo;s mercurial repository, if you don&rsquo;t have mercurial installed already, you&rsquo;ll first need to install it with:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ brew install hg</span></code></pre></td></tr></table></div></figure>


<p>Next, go get goimports with:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ go get code.google.com/p/go.tools/cmd/goimports</span></code></pre></td></tr></table></div></figure>


<p>Continuing on previous .emacs in <a href="http://tleyden.github.io/blog/2014/05/22/configure-emacs-as-a-go-editor-from-scratch/">Part 1</a>, update your .emacs to:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(defun my-go-mode-hook ()
</span><span class='line'>  ; Use goimports instead of go-fmt
</span><span class='line'>  (setq gofmt-command "goimports")
</span><span class='line'>  ; Call Gofmt before saving
</span><span class='line'>  (add-hook 'before-save-hook 'gofmt-before-save)
</span><span class='line'>  ; Customize compile command to run go build
</span><span class='line'>  (if (not (string-match "go" compile-command))
</span><span class='line'>      (set (make-local-variable 'compile-command)
</span><span class='line'>           "go build -v && go test -v && go vet"))
</span><span class='line'>  ; Godef jump key binding
</span><span class='line'>  (local-set-key (kbd "M-.") 'godef-jump))
</span><span class='line'>(add-hook 'go-mode-hook 'my-go-mode-hook)</span></code></pre></td></tr></table></div></figure>


<p><strong>Restart emacs</strong> to force it to reload the configuration</p>

<h3>Testing out goimports</h3>

<ul>
<li>Open an existing .go file that contains imports</li>
<li>Remove one or more of the imports</li>
<li>Save the file</li>
</ul>


<p>After you save the file, it should re-add the imports.  Yay!</p>

<p>Basically any time you add or remove code that requires a different set of imports, saving the file will cause it to re-write the file with the correct imports.</p>

<h2>The Go Oracle</h2>

<p>The Go Oracle will blow your mind!  It can do things like find all the callers of a given function/method.  It can also show you all the functions that read or write from a given channel.  In short, it rocks.</p>

<p>Here&rsquo;s what you need to do in order to wield this powerful tool from within Emacs.</p>

<h3>Go get oracle</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>go get code.google.com/p/go.tools/cmd/oracle</span></code></pre></td></tr></table></div></figure>


<h3>Move oracle binary so Emacs can find it</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo mv $GOPATH/bin/oracle $GOROOT/bin/</span></code></pre></td></tr></table></div></figure>


<h3>Update .emacs</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>; Go Oracle
</span><span class='line'>(load-file "$GOPATH/src/code.google.com/p/go.tools/cmd/oracle/oracle.el")
</span><span class='line'>
</span><span class='line'>(defun my-go-mode-hook ()
</span><span class='line'>  ; Use goimports instead of go-fmt
</span><span class='line'>  (setq gofmt-command "goimports")
</span><span class='line'>  ; Call Gofmt before saving
</span><span class='line'>  (add-hook 'before-save-hook 'gofmt-before-save)
</span><span class='line'>  ; Customize compile command to run go build
</span><span class='line'>  (if (not (string-match "go" compile-command))
</span><span class='line'>      (set (make-local-variable 'compile-command)
</span><span class='line'>           "go build -v && go test -v && go vet"))
</span><span class='line'>  ; Godef jump key binding
</span><span class='line'>  (local-set-key (kbd "M-.") 'godef-jump))
</span><span class='line'>  ; Go Oracle
</span><span class='line'>  (go-oracle-mode)
</span><span class='line'>(add-hook 'go-mode-hook 'my-go-mode-hook)
</span></code></pre></td></tr></table></div></figure>


<p><strong>Restart Emacs</strong> to make these changes take effect.</p>

<h3>Get a test package to play with</h3>

<p>This package works with go-oracle (I tested it out while writing this blog post), so you should use it to give Go Oracle a spin:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>go get github.com/tleyden/checkers-bot-minimax</span></code></pre></td></tr></table></div></figure>


<h3>Set the oracle analysis scope</h3>

<p>From within emacs, open <code>$GOPATH/src/github.com/tleyden/checkers-bot-minimax/thinker.go</code></p>

<p>You need to tell Go Oracle the <strong>main</strong> package scope under which you want it to operate:</p>

<p><code>M-x go-oracle-set-scope</code></p>

<p>it will prompt you with:</p>

<p><code>Go oracle scope:</code></p>

<p>and you should enter:</p>

<p><code>github.com/tleyden/checkers-bot-minimax</code> and hit Enter.</p>

<p>Nothing will appear to happen, but now Go Oracle is now ready to show it&rsquo;s magic.  (<em>note</em> it will <strong>not</strong> autocomplete packages in this dialog, which is mildly annoying.  Make sure to spell them correctly.)</p>

<p><strong>Important:</strong> When you call <code>go-oracle-set-scope</code>, you always need to give it a <strong>main</strong> package.  This is something that will probably frequently trip you up while using Go Oracle.</p>

<h3>Use oracle to find the callers of a method</h3>

<p>You should still have the <code>$GOPATH/src/github.com/tleyden/checkers-bot-minimax/thinker.go</code> file open within emacs.</p>

<p>Position the cursor on the &ldquo;T&rdquo; in the <code>Think</code> method (line 13 of thinker.go):</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/Emacs_go_oracle_0" alt="screenshot" /></p>

<p>And then run</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>M-x go-oracle-callers</span></code></pre></td></tr></table></div></figure>


<p>Emacs should open a new buffer on the right hand side with all of the places where the <code>Think</code> method is called.  In this case, there is only one place in the code that calls it:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/Emacs_go_oracle" alt="screenshot" /></p>

<p>To go to the call site, position your cursor on the red underscore to the left of &ldquo;dynamic method call&rdquo; and hit Enter.  It should take you to line 240 in gamecontroller.go:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/Emacs_go_oracle2" alt="screenshot" /></p>

<p>Note that it actually crossed package boundaries, since the called function (<code>Think</code>) was in the <code>main</code> package, while the call site was in the <code>checkersbot</code> package.</p>

<p>If you got this far, you are up and running with The Go Oracle on Emacs!</p>

<p>Now you should try it with one of your own packages.</p>

<p>This is just scratching the surface &mdash; to get more information on how to use Go Oracle, see <a href="https://docs.google.com/document/d/1SLk36YRjjMgKqe490mSRzOPYEDe0Y_WQNRv-EiFYUyw/view">go oracle: user manual</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configure Emacs as a Go editor from scratch]]></title>
    <link href="http://tleyden.github.io/blog/2014/05/22/configure-emacs-as-a-go-editor-from-scratch/"/>
    <updated>2014-05-22T16:46:00-07:00</updated>
    <id>http://tleyden.github.io/blog/2014/05/22/configure-emacs-as-a-go-editor-from-scratch</id>
    <content type="html"><![CDATA[<p>This explains the steps to get a productive Emacs environment for Go programming on OSX, starting from scratch.</p>

<h2>Install Emacs</h2>

<p>I recommend using the emacs from <a href="http://emacsformacosx.com">emacsformacosx.com</a>.</p>

<p>It has a GUI installer so I won&rsquo;t say much more about it.</p>

<h2>Install Go</h2>

<ul>
<li>At the time of writing, I installed <a href="https://storage.googleapis.com/golang/go1.2.2.darwin-amd64-osx10.8.pkg">https://storage.googleapis.com/golang/go1.2.2.darwin-amd64-osx10.8.pkg</a></li>
<li>After installing the package, you&rsquo;ll want to define the following environment variables in your <code>~/.bash_profile</code>:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export GOROOT=/usr/local/go
</span><span class='line'>export GOPATH=~/Development/gocode
</span><span class='line'>export PATH=$PATH:$GOROOT/bin</span></code></pre></td></tr></table></div></figure>


<h2>Configure go-mode</h2>

<p>Go-mode is an Emacs major mode for editing Go code.  An absolute must for anyone writing Go w/ Emacs.</p>

<p>The following is a brief summary of <a href="http://dominik.honnef.co/posts/2013/03/writing_go_in_emacs/">Dominik Honnef&rsquo;s instructions</a></p>

<ul>
<li><code>mkdir -p ~/Misc/emacs &amp;&amp; cd ~/Misc/emacs</code></li>
<li><code>git clone git@github.com:dominikh/go-mode.el.git</code></li>
<li>From within Emacs, run <code>M-x update-file-autoloads</code>, point it at the <strong>go-mode.el</strong> file in the cloned directory.</li>
<li>Emacs will prompt you for a result file, and you should enter <strong>go-mode-load.el</strong></li>
<li>Add these two lines to your ~/.emacs</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(add-to-list 'load-path "~/Misc/emacs/go-mode.el/")
</span><span class='line'>(require 'go-mode-load)</span></code></pre></td></tr></table></div></figure>


<p>Restart Emacs and open a .go file, you should see the mode as &ldquo;Go&rdquo; rather than &ldquo;Fundamental&rdquo;.</p>

<p>For a full description of what go-mode can do for you, see <a href="http://dominik.honnef.co/posts/2013/03/writing_go_in_emacs/">Dominik Honnef&rsquo;s blog</a>, but one really useful thing to be aware of is that you can quickly import packages via <code>C-c C-a</code></p>

<h2>Update Emacs config for <code>godoc</code></h2>

<p>It&rsquo;s really useful to be able to able to pull up 3rd party or standard library docs from within Emacs using the <code>godoc</code> tool.</p>

<p><em>Unfortunately, it was necessary to duplicate the $PATH and $GOPATH environment variables in the .emacs file, so that the GUI Emacs app can see it.  @eentzel tweeted me a <a href="http://blog.gaz-jones.com/2012/02/01/setting_up_emacs_for_clojure_development.html">blog post</a> that explains how to deal with this, and I will update this blog post to reflect that at some point.</em></p>

<p><strong>NOTE</strong>: you will need to modify the snippet below to reflect the $PATH and $GOPATH variables, don&rsquo;t just blindly copy and paste these.</p>

<ul>
<li>Add your $PATH and $GOPATH to your ~/.emacs</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(setenv "PATH" "/Users/tleyden/.rbenv/shims:/Users/tleyden/.rbenv/shims:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/local/go/bin")
</span><span class='line'>(setenv "GOPATH" "/Users/tleyden/Development/gocode")</span></code></pre></td></tr></table></div></figure>


<p>After doing this step, you should be able to run <code>M-x godoc</code> and it should be able to autocomplete paths of packages.  (of course, you may want to <code>go get</code> some packages first if you don&rsquo;t have any)</p>

<h2>Automatically call gofmt on save</h2>

<p><code>gofmt</code> reformats code into the One True Go Style Coding Standard.  You&rsquo;ll want to call it every time you save a file.</p>

<p>Add these to your ~/.emacs:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(setq exec-path (cons "/usr/local/go/bin" exec-path))
</span><span class='line'>(add-to-list 'exec-path "/Users/tleyden/Development/gocode/bin")
</span><span class='line'>(add-hook 'before-save-hook 'gofmt-before-save)</span></code></pre></td></tr></table></div></figure>


<p>After this step, whenever you save a Go file, it will automatically reformat the file with <code>gofmt</code>.</p>

<h2>Godef</h2>

<p>Godef is essential: it lets you quickly jump around the code, as you might be used to with a full featured IDE.</p>

<p>From what I can tell, installing <a href="https://github.com/dominikh/go-mode.el">go-mode</a> seems to automatically install godef.</p>

<p>To verify that godef is indeed installed:</p>

<ul>
<li>Putting the cursor over a method name</li>
<li>Try doing <code>M-x godef-jump</code> to jump into the method, and <code>M-*</code> to go back.</li>
</ul>


<p>In order to add godef key bindings, add these to your ~/.emacs:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(defun my-go-mode-hook ()
</span><span class='line'>  ; Call Gofmt before saving                                                    
</span><span class='line'>  (add-hook 'before-save-hook 'gofmt-before-save)
</span><span class='line'>  ; Godef jump key binding                                                      
</span><span class='line'>  (local-set-key (kbd "M-.") 'godef-jump))
</span><span class='line'>(add-hook 'go-mode-hook 'my-go-mode-hook)</span></code></pre></td></tr></table></div></figure>


<p>and remove your previous call to <code>(add-hook 'before-save-hook 'gofmt-before-save)</code> since it&rsquo;s now redundant</p>

<p>Now you can jump into code with <code>M-.</code> and jump back with <code>M-*</code></p>

<h2>Autocomplete</h2>

<p>The following is a brief summary of the <a href="http://cx4a.org/software/auto-complete/manual.html#Installation">emacs autocomplete manual</a></p>

<ul>
<li>Download and extract <a href="http://cx4a.org/pub/auto-complete/auto-complete-1.3.1.tar.bz2">http://cx4a.org/pub/auto-complete/auto-complete-1.3.1.tar.bz2</a></li>
<li>Cd into extracted dir and run <code>emacs -batch -l etc/install.el</code></li>
<li>It will tell you to add the following to your ~/.emacs:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(add-to-list 'load-path "/Users/tleyden/.emacs.d/")
</span><span class='line'>(require 'auto-complete-config)
</span><span class='line'>(add-to-list 'ac-dictionary-directories "/Users/tleyden/.emacs.d//ac-dict")
</span><span class='line'>(ac-config-default)</span></code></pre></td></tr></table></div></figure>


<p>To see any effect, we need to install gocode in the next step.</p>

<h2>Gocode: Go aware Autocomplete</h2>

<p>The following is a brief summary of the <a href="https://github.com/nsf/gocode">gocode README</a></p>

<ul>
<li><code>go get -u -v github.com/nsf/gocode</code></li>
<li><code>cp /Users/tleyden/Development/gocode/src/github.com/nsf/gocode/emacs/go-autocomplete.el ~/.emacs.d/</code></li>
<li>Add the following to your ~/.emacs</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(require 'go-autocomplete)
</span><span class='line'>(require 'auto-complete-config)</span></code></pre></td></tr></table></div></figure>


<p>At this point, after you restart emacs, when you start typing something, you should see a popup menu with choices, like <a href="http://tleyden-misc.s3.amazonaws.com/blog_images/emacs_autocomplete.png">this screenshot</a>.</p>

<h2>Customize compile command to run <code>go build</code></h2>

<p>It&rsquo;s convenient to be able to run <code>M-x compile</code> to compile and test your Go code from within emacs.</p>

<p>To do that, edit your ~/.emacs and replace your go-mode hook with:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(defun my-go-mode-hook ()
</span><span class='line'>  ; Call Gofmt before saving
</span><span class='line'>  (add-hook 'before-save-hook 'gofmt-before-save)
</span><span class='line'>  ; Customize compile command to run go build
</span><span class='line'>  (if (not (string-match "go" compile-command))
</span><span class='line'>      (set (make-local-variable 'compile-command)
</span><span class='line'>           "go build -v && go test -v && go vet"))
</span><span class='line'>  ; Godef jump key binding
</span><span class='line'>  (local-set-key (kbd "M-.") 'godef-jump))
</span><span class='line'>(add-hook 'go-mode-hook 'my-go-mode-hook)</span></code></pre></td></tr></table></div></figure>


<p>After that, restart emacs, and when you type <code>M-x compile</code>, it should try to execute <code>go build -v &amp;&amp; go test -v &amp;&amp; go vet</code> instead of the default behavior.</p>

<p><strong>Power tip</strong>: you can jump straight to each compile error by running <code>C-x `</code>.  Each time you do it, it will jump to the next error.</p>

<h2>Is this too easy for you?</h2>

<p>If you&rsquo;re yawning and you already know all this stuff, or you&rsquo;re ready to take it to the next level, check out <a href="http://www.youtube.com/watch?v=5wipWZKvNSo">5 minutes of go in emacs</a></p>

<p>(PS: thanks <a href="https://twitter.com/dlsspy">@dlsspy</a> for taking the time to teach me the Emacs wrestling techniques needed to get this far.)</p>

<h2>Continue to Part 2</h2>

<p>go-imports and go-oracle are covered in <a href="../../27/configure-emacs-as-a-go-editor-from-scratch-part-2/">Part 2</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What is Couchbase Mobile and why should you care?]]></title>
    <link href="http://tleyden.github.io/blog/2014/05/21/what-is-couchbase-mobile-and-why-should-you-care/"/>
    <updated>2014-05-21T13:57:00-07:00</updated>
    <id>http://tleyden.github.io/blog/2014/05/21/what-is-couchbase-mobile-and-why-should-you-care</id>
    <content type="html"><![CDATA[<p>Couchbase Mobile just announced it&rsquo;s <a href="http://www.couchbase.com/press-releases/couchbase-mobile-enables-new-breed-network-independent-mobile-applications">1.0 release</a> today.</p>

<p>What is Couchbase Mobile?</p>

<ul>
<li>Couchbase Lite is an open source iOS/Android NoSQL DB with built-in sync capability.</li>
<li>Couchbase Mobile refers to the &ldquo;full stack&rdquo; solution, which includes the (also open source) server components that Couchbase Lite uses for sync.</li>
</ul>


<p>To give a deeper look at what problem Couchbase Mobile is meant to solve, let me tell you the story of how I came to discover Couchbase Lite as a developer.  In my <a href="http://techcrunch.com/2012/01/26/signature-launches-to-bring-a-personalized-mobile-shopping-service-to-brick-and-mortar-retailers/">previous startup</a>, we built a mobile CRM app for sales associates.</p>

<p>The very first pilot release of the app, the initial architecture was:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/architecture_1.png" alt="screenshot" /></p>

<p>It was very simple, and the server was almost the Single Point of Truth, except for our JSON caching layer which had a very short expiry time before it would refetch from the server.  The biggest downside to this architecture was that <em>it only worked well when the device had a fast connection to the internet</em>.</p>

<p>But there was another problem: getting updates to sync across devices in a timely manner.   When sales associate #1 would update a customer, sales associate #2 wouldn&rsquo;t see the change because:</p>

<ul>
<li>How does the app for sales associate #2 know it needs to &ldquo;re-sync&rdquo; the data?</li>
<li>How will the app know that something changed on the backend that should cause it to invalidate that locally cached data?</li>
</ul>


<p>We realized that the data sync between the devices was going to be a huge issue going forward, and so we decided to change our architecture to something like this:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/architecture_2.png" alt="screenshot" /></p>

<p>So the app would be displaying what&rsquo;s stored in the Core Data datastore, and we&rsquo;d build a <em>sync engine</em> component that would shuttle data bidirectionally between Core Data and the backend server.</p>

<p>That seemed like a fine idea on paper, except that I refused to build it.  I knew it would take way too long to build, and once it was built it probably would entail endless debugging and tuning.</p>

<p>Instead, after some intense debate we embarked on a furious sprint to convert everything over to <a href="https://github.com/couchbase/couchbase-lite-ios">Couchbase Lite iOS</a>.  We ended up with an architecture like this:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/architecture%203.png" alt="screenshot" /></p>

<p>It was similar in spirit to our original plans, except <strong>we didn&rsquo;t have to build any of the hard stuff</strong> &mdash; the storage engine and the sync was already taken care of for us by Couchbase Lite.</p>

<p>(<em>note</em>: there were also components that listened for changes to the backend server database and fired off emails and push notifications, but I&rsquo;m not showing them here)</p>

<p>After the conversion ..</p>

<p><strong>On the upside</strong></p>

<ul>
<li>Any updates to customer data would quickly sync across all devices.</li>
<li>Our app still worked even when the device was completely offline.</li>
<li>Our app was orders of magnituted faster in &ldquo;barely connected&rdquo; scenarios, because Couchbase Lite <em>takes the network out of the critical path</em>.</li>
<li>Our data was now &ldquo;document oriented&rdquo;, and so we could worry less about rolling out schema changes while having several different versions of our app out in the wild.</li>
</ul>


<p><strong>On the downside</strong></p>

<ul>
<li>We ran into a few bizarre situations where a client app would <em>regurgitate</em> a ton of unwanted data back into the system after we&rsquo;d thought we&rsquo;d removed it.  To be fair, that was our fault, but I mention it because Couchbase Lite can throw you some curve balls if you aren&rsquo;t paying attention.</li>
<li>Certain things were awkward.  For example for our initial login experience, we had to sync the data before the sales associate could login.  We ended up re-working that to have the login go directly against the server, which meant that logging in required the user to be online.</li>
<li>When things went wrong, they were a bit complicated to debug.  (but because Couchbase Lite is Open Source, we could diagnose and fix bugs ourselves, which was a huge win.)</li>
</ul>


<h1>So what can Couchbase Lite do for you?</h1>

<h2>Sync Engine included, so you don&rsquo;t have to build one</h2>

<p>If I had to sum up one quick elevator pitch of Couchbase Lite, it would be:</p>

<blockquote><p>If you find that you&rsquo;re building a &ldquo;sync engine&rdquo; to sync data from your app to other instances of your app and/or the cloud, then you should probably be building it on top of Couchbase Lite instead of going down that rabbit hole &mdash; since you may never make it back out.</p></blockquote>

<h2>Your app now works well in offline or occasionally connected scenarios</h2>

<p>This is something that users expect your app to handle.  For example, if I&rsquo;m on the BART going from SF &ndash;> Oakland and have no signal, I should still be able to read my tweets, and even send new tweets that will be queued to sync once the device comes back online.</p>

<p>If your app is based on Couchbase Lite, you essentially get these features for free.</p>

<ul>
<li>When you load tweets, it is loaded from the local Couchbase Lite store, without any need to hit the server.</li>
<li>When you create a new tweet, you just save it to Couchbase Lite, and let it handle the heavy lifting of getting that pushed up to the server once the device is back online.</li>
</ul>


<h2>Your data model is now Document Oriented</h2>

<p>This is a double edged sword, and to be perfectly honest a Document Oriented approach is not always the ideal data model for every application.  However, for some applications (like CRM), it&rsquo;s a much more natural fit than the relational model.</p>

<p>And you&rsquo;ll never have to worry about getting yourself stuck in Core Data schema migration hell.</p>

<h1>What&rsquo;s the dark side of Couchbase Lite?</h1>

<h2>Queries can be faster, but they have certain limitations</h2>

<p>With SQL, you can run arbitrary queries, irregardless if there is an index or not.</p>

<p>Couchbase Lite cannot be queried with SQL.  Instead you must define <em>Views</em>, which are essentially indexes, and run queries on those views.  Views are extremely fast and efficient, but if you don&rsquo;t have a view, you can&rsquo;t run a query, period.</p>

<p>For people who are used to SQL, defining lower level map/reduce views takes some time to wrap your head around.</p>

<h2>Complex queries can get downright awkward</h2>

<p>Views are powerful, but they have their limitations, and if your query is complex enough, you may end up needing to write multiple views and coalescing/sorting the data in memory.</p>

<h2>It&rsquo;s not a black box, but it <em>is</em> complicated.</h2>

<p>The replication code in Couchbase Lite is complicated.  I know, because I&rsquo;ve spent a better part of the last year staring at it.</p>

<p>As an app developer, you are putting your trust that the replication will work as you would expect and that it will be performant and easy on the battery.</p>

<p><strong>The good news</strong> is that it&rsquo;s 100% open source under the Apache 2 license.  So you can debug into it, send issues and pull requests to our <a href="https://github.com/couchbase/couchbase-lite-android">github repo</a>, and even maintain your own fork if needed.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A successful git branching model with enterprise support]]></title>
    <link href="http://tleyden.github.io/blog/2014/04/09/a-successful-git-branching-model-with-enterprise-support/"/>
    <updated>2014-04-09T11:39:00-07:00</updated>
    <id>http://tleyden.github.io/blog/2014/04/09/a-successful-git-branching-model-with-enterprise-support</id>
    <content type="html"><![CDATA[<p>This further extends <a href="http://tleyden.github.io/blog/2014/03/18/a-slight-tweak-on-a-successful-git-branching-model/">A Slight Tweak on a Successful Git Branching Model</a> with the addition of the concept of support branches.</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/release-branching-strategy.png" alt="diagram" /></p>

<h2>Release Branches</h2>

<ul>
<li><p>When completed the release branch would be merged into both the master and stable branches, the commit on the stable branch would be tagged with a release tag (eg, 1.0.0).</p></li>
<li><p>The release branch would be discarded after being merged back into master and stable.</p></li>
<li><p>Release branches would be named “release/xxx”, where xxx is the target release tag for that release.  Eg, “release/1.0.0”.</p></li>
<li><p>Release branches should only have bugfixes related to the release being committed to them.  All other changes should be on feature branches or the master branch, isolated from the release process.</p></li>
<li><p>Release branches would help avoid making developers having to “double-commit” bugfixes related to a release to both the release branch and the master branch &mdash; because the release branch will be merged into master at the time of release, they only need to commit the fix to the release branch.</p></li>
<li><p>Release branches should be periodically merged back into the master branch if they run longer than normal (eg, if it was expected to last 3 weeks and ended up lasting 8 weeks), rather than waiting until the time of release.  This will reduce the chance of having major merge conflicts trying to merge back into master.</p></li>
<li><p>When a release is ready to be tagged, if the release branch does not easily merge into master, it is up to the dev lead on that team to handle the merge (not the build engineer).  In this case, the build engineer should not be blocked, because the merge into stable will be a fast-forward merge, and so the release can proceed despite not having been merged into master yet.</p></li>
</ul>


<h2>Support Branches</h2>

<ul>
<li><p>Support branches would be created “on demand” when requested by customers who are stuck on legacy releases and are not able to move forward to current releases, but need security and other bug fixes.</p></li>
<li><p>Support branches should be avoided if possible, by encouraging customers to move to the current release, because they create extra work for the entire team.</p></li>
<li><p>Support branches would follow a similar naming scheme and would be named “support/xxx”, where xxx is the release tag from which they were branched off of.  Eg, “support/1.0.1”.</p></li>
<li><p>Support branches are essentially dead-end branches, since their changes would unlikely need to be merged back into master (or stable) as the support branch contains “ancient code” and most likely those fixes would already have been integrated into the codebase.</p></li>
<li><p>If a customer is on the current release, then there is no need to create a support branch for their required fix.  Instead, a hotfix branch should be used and a new release tag should be created.</p></li>
</ul>


<h2>Hotfix Branches</h2>

<ul>
<li><p>Hotfix branches would branch off of the stable branch, and be used for minor post-release bugfixes.</p></li>
<li><p>Hotfix branches would be named “hotfix/xxx”, where xxx might typically be an issue id.  Once their changes have been merged into master and stable, they should be deleted.</p></li>
<li><p>Hotfix branches are expected to undergo less QA compared to release branches, and therefore are expected to contain minimum changes to fix showstopper bugs in a release.   The changes should not include refactoring or any other risky changes.</p></li>
<li><p>If it’s being branched off the master branch, it’s not a hotfix branch.  Hotfixes are only branched off the stable branch.</p></li>
<li><p>Hotfix branches should verified on the CI server using the automated QA suite before being considered complete.</p></li>
<li><p>After being accepted by QA, hotfix branches are merged back into master and stable, and the latest commit on stable is tagged with a release tag.  (eg, 1.0.1)</p></li>
<li><p>Similar to release branches, if hotfixes do not easily merge back into master, the build engineer would assign the dev lead the responsibility for completing the merge, but this should not block the release.  However since hotfix branches are so short-lived, this is very unlikely to happen.</p></li>
</ul>


<h2>Stable Branch</h2>

<ul>
<li><p>The stable branch would represent the “released” mainline development.</p></li>
<li><p>The latest commit on stable should always correspond to the latest release tag.</p></li>
<li><p>All release tags should be made against commits on stable, except for those on legacy support branches.</p></li>
<li><p>Developers who wanted to subscribe to the latest released code would follow the stable branch.</p></li>
</ul>


<h2>Master Branch</h2>

<ul>
<li>The master branch would represent the “as-yet-unreleased” mainline development.</li>
</ul>


<h2>Feature Branches</h2>

<ul>
<li>All non-trivial changes should be done on feature branches and undergo code review before being merged into the master branch.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A slight tweak on A Successful Git Branching Model]]></title>
    <link href="http://tleyden.github.io/blog/2014/03/18/a-slight-tweak-on-a-successful-git-branching-model/"/>
    <updated>2014-03-18T10:32:00-07:00</updated>
    <id>http://tleyden.github.io/blog/2014/03/18/a-slight-tweak-on-a-successful-git-branching-model</id>
    <content type="html"><![CDATA[<p>A great &ldquo;best practices&rdquo; for juggling git branches in a release cycle is <a href="http://nvie.com/posts/a-successful-git-branching-model/">A successful git branching model</a>.  It is also accompanied with a tool called <a href="https://github.com/nvie/gitflow">git flow</a> that makes it easy to implement in practice.</p>

<p>It does however have one major issue: many people use a different naming scheme.</p>

<p>Instead of:</p>

<ul>
<li><strong>Master</strong> &ndash; the latest &ldquo;stable&rdquo; branch</li>
<li><strong>Development</strong> &ndash; bleeding edge development branch</li>
</ul>


<p>a slightly more common naming pattern is:</p>

<ul>
<li><strong>Master</strong> &ndash; bleeding edge development branch</li>
<li><strong>Stable</strong> &ndash; the latest &ldquo;stable&rdquo; branch</li>
</ul>


<p>To that end, I&rsquo;ve tweaked the original diagram to be.</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/proposed_couchbaselite_branchingmodel.png" alt="diagram" /></p>

<h2>Every branch solves a problem</h2>

<p>The natural reaction to most people seeing this diagram is <em>dude, that&rsquo;s way too many branches, this is way more complicated than it needs to be</em>.  Actually, I&rsquo;d argue that it&rsquo;s minimally complex to solve the problems that these branches are designed to solve.  In other words, each type of branch justifies it&rsquo;s existence by the problem it&rsquo;s designed to solve.</p>

<p>From the perspective of a library developer (in my case, <a href="https://github.com/couchbase/couchbase-lite-android">Couchbase Lite for Android</a>), here are the problems each branch is intended to solve.</p>

<h3>Permanent and External Facing Branches</h3>

<p><em>These branches are permanent, in the sense they have a continuous lifetime.  They are also external, and consumers of the library would typically depend on one or both of these branches</em></p>

<p><strong>Master</strong></p>

<ul>
<li>A home for the latest &ldquo;feature complete&rdquo; / reviewed code.</li>
<li>Anyone internal or external who wants to stay up to date with latest project developments needs this branch.</li>
</ul>


<p><strong>Stable</strong></p>

<ul>
<li>A home for the code that corresponds to the latest tagged release.</li>
<li>This branch would be the basis for post-release bugfixes, eg an external developer who finds a bug in the latest release would send a pull request against this branch.</li>
<li>Developers depending on this code directly in their app would likely point to this branch on their own stable branch.</li>
</ul>


<h3>Ephemeral and Internal Only Branches</h3>

<p><em>These branches are emphemeral in nature, and are thrown away once they are no longer useful.  Developers consuming the library would typically ignore these</em></p>

<p><strong>FeatureX</strong></p>

<ul>
<li>A place for in progress features to live without de-stabilizing the master branch.  Can be many of these.</li>
</ul>


<p><strong>Hotfix</strong></p>

<ul>
<li>An in progress fix would go here, where that fix is destined to be merged back into latest stable but not part of a new release that is branched off of master.</li>
<li>While this hotfix is in progress, since these commits are not part of a tagged release, they cannot go on stable (yet), otherwise it would be a violation of the stable branch contract that says that stable reflects the latest tagged release.</li>
<li>They could go directly on a &ldquo;local stable&rdquo; branch, which is only on the developers workstation, but that prevents sharing the branch or running CI unit tests against it, so it&rsquo;s not a good solution.</li>
<li>NOTE: when hotfix merged, new release tagged simultaneously with a merge to stable, so the stable branch contract stays satisfied.</li>
</ul>


<p><strong>Release</strong></p>

<ul>
<li>During QA release process, need a place to QA and apply bugfixes, while isolated from destabilizing changes such as merging feature branches.</li>
<li>Release branch allows feature branch merging to happen concurrently on master branch, which is especially crucial if release gets delayed.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Playing with Go and OpenGL]]></title>
    <link href="http://tleyden.github.io/blog/2014/02/08/playing-with-go-and-opengl/"/>
    <updated>2014-02-08T16:01:00-08:00</updated>
    <id>http://tleyden.github.io/blog/2014/02/08/playing-with-go-and-opengl</id>
    <content type="html"><![CDATA[<p>Get this spinning gopher working with Go and OpenGL on OSX Mavericks via <a href="https://github.com/chsc/gogl/">gogl</a></p>

<iframe width="420" height="315" src="http://tleyden.github.io//www.youtube.com/embed/yae-bRLdfaU" frameborder="0" allowfullscreen></iframe>


<h1>Steps</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ brew install glfw2
</span><span class='line'>$ go get -u -v github.com/tleyden/gogl
</span><span class='line'>$ go get -u -v github.com/go-gl/glfw  
</span><span class='line'>$ cd $GOPATH/src/github.com/tleyden/gogl
</span><span class='line'>$ make bindings
</span><span class='line'>$ go get -u -v github.com/chsc/gogl
</span><span class='line'>$ cd $GOPATH/src/github.com/tleyden/gogl/examples/gopher
</span><span class='line'>$ go run gopher.go</span></code></pre></td></tr></table></div></figure>


<p>NOTE: if <a href="https://github.com/chsc/gogl/pull/37">pull request #37</a> has already been merged into <a href="https://github.com/chsc/gogl/">gogl</a>, then replace <code>github.com/tleyden/gogl</code> with <code>https://github.com/chsc/gogl</code> in steps above.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why use Go when you can just use C++?]]></title>
    <link href="http://tleyden.github.io/blog/2014/02/06/why-use-go-when-you-can-just-use-c-plus-plus/"/>
    <updated>2014-02-06T08:25:00-08:00</updated>
    <id>http://tleyden.github.io/blog/2014/02/06/why-use-go-when-you-can-just-use-c-plus-plus</id>
    <content type="html"><![CDATA[<p>I recently saw this on a mailing list:</p>

<blockquote><p>What are the advantages of Go against C++ or other languages?</p></blockquote>

<h1>Go has sane concurrency.</h1>

<p>In C++ the main tool to deal with concurrency is pthreads, but making threaded programming correct is extremely difficult and error prone.  Trying to make it performant by minimizing locking makes it even more challenging.</p>

<p>Go, OTOH, has a concept of goroutines and channels for concurrency.  The idea has its roots in CSP (communicating sequential processing), and is not unlike Erlang&rsquo;s style of having processes that communicating by message passing.</p>

<p>In Go, instead of having threads communicating by sharing memory (and locking), goroutines share memory by communicating over channels.  Eg, concurrent goroutines communicate over channels, and each goroutine&rsquo;s internal state is private to that goroutine.  Also, concurrency and their constructs like channels are built right into the Go language, which affords many advantages over languages that have had concurrency slapped on as an afterthought.</p>

<h1>Other Strengths</h1>

<ul>
<li>No unsafe pointer arithmetic.</li>
<li>Array bound checking</li>
<li>Write once run anywhere</li>
<li>Closures (eg, lambdas)</li>
<li>Functions are first class objects</li>
<li>Multiple return values</li>
<li>Does not have IFDEF&rsquo;s, so no IFDEF hell and unmaintainable code.</li>
<li>Compiles blazingly fast</li>
<li>Gofmt &ndash; All code is uniformly formatted, making codebases much easier to read.  (a la Python)</li>
<li>Garbage collection</li>
</ul>


<h1>Weaknesses</h1>

<ul>
<li>Lack of generics</li>
<li>Not quite as fast as C/C++ (partly due to GC overhead)</li>
<li>Integration with existing native code is a bit limited (you can&rsquo;t build libraries in Go or link Go code into a C/C++ executable)</li>
<li>IDE support is limited compared to C/C++/Obj-C/Java</li>
<li>Doesn&rsquo;t work with regular debugging tools because it doesn&rsquo;t use normal calling conventions.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A stubbed out gradle multi-project hierarchy using git submodules]]></title>
    <link href="http://tleyden.github.io/blog/2014/01/31/a-stubbed-out-gradle-multi-project-hierarchy-using-git-submodules/"/>
    <updated>2014-01-31T10:50:00-08:00</updated>
    <id>http://tleyden.github.io/blog/2014/01/31/a-stubbed-out-gradle-multi-project-hierarchy-using-git-submodules</id>
    <content type="html"><![CDATA[<p>I&rsquo;m about to split up the <a href="https://github.com/couchbase/couchbase-lite-android">couchbase-lite</a> android library into two parts: a pure-java and an android specific library.  The android library will depend on the pure-java library.</p>

<p>Before going down this project refactoring rabbit hole for the real project, I decided to stub out a complete project hierarchy to validate that it was going to actually work.  (I&rsquo;m calling this project hierarchy &ldquo;stubworld&rdquo; for lack of a sillier name)</p>

<p>There are five projects in total, here are the two top-level projects</p>

<p><a href="https://github.com/tleyden/stubworld-app-android">https://github.com/tleyden/stubworld-app-android</a>  (an Android app)</p>

<p><img src="http://cl.ly/image/3O31321l0b0n/stubworld_architecture_android.png" alt="" /></p>

<p><a href="https://github.com/tleyden/stubworld-app-cmdline">https://github.com/tleyden/stubworld-app-cmdline</a>  (a pure java Command Line application)</p>

<p><img src="http://cl.ly/image/1M2C333S2s0u/stubworld_architecture_desktop.png" alt="" /></p>

<p>The projects are all self contained gradle projects and can be imported in either Android Studio or IntelliJ CE 13, and the dependencies on lower level projects are done via git submodules (and even git sub-submodules, <em>gulp</em>).   In either top level project you can easily debug and edit the code in the lower level projects, since they use source level dependencies.</p>

<p>The biggest sticking point I ran into was that initially I tried to include a dependency via:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>compile project(':libraries:stubworld-corelib-java')</span></code></pre></td></tr></table></div></figure>


<p>which totally broke when trying to embed this project into another parent project. The fix was to change it to use a relative path by removing the leading colon:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>compile project('libraries:stubworld-corelib-java')</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;m posting this in case it&rsquo;s useful to anyone who needs to do something similar, or if any Gradle / Android Studio Jedi masters have any feedback like &ldquo;why did you do X, when you just could have done Y?&rdquo;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective C coding interview challenge: URLPuller]]></title>
    <link href="http://tleyden.github.io/blog/2014/01/13/objective-c-coding-interview-challenge-urlpuller/"/>
    <updated>2014-01-13T11:45:00-08:00</updated>
    <id>http://tleyden.github.io/blog/2014/01/13/objective-c-coding-interview-challenge-urlpuller</id>
    <content type="html"><![CDATA[<h1>Programming Challenge</h1>

<p>The goal is to create an Objective-C class which takes an array of NSURL&rsquo;s, downloads their contents asynchronously, and writes the contents of each URL to a unique file.</p>

<p>The class should be named URLPuller and should have the following instance methods:</p>

<ul>
<li><code>- (void) downloadUrlsAsync: (NSArray*)urls</code></li>
<li><code>- (void) waitUntilAllDownloadsFinish</code></li>
<li><code>- (NSString*) downloadedPathForURL: (NSURL*)url</code></li>
</ul>


<p>Here are the detailed descriptions of each method:</p>

<h2>downloadUrlsAsync</h2>

<p><code>- (void) downloadUrlsAsync: (NSArray*)urls</code></p>

<p>The urls array will contain an array of NSURL&rsquo;s.  The method should return immediately, eg, it&rsquo;s an asynchronous API call that will run in the background.</p>

<p>The downloaded files can be stored in any directory, where the filename is {sha1 hash of url}.downloaded</p>

<h2>waitUntilAllDownloadsFinish</h2>

<p><code>- (void) waitUntilAllDownloadsFinish</code></p>

<p>Block until all of the URLs have been downloaded.</p>

<p>If this is called while there is no download in progress, it should return immediately.  Otherwise, it should block until all the downloads have finished.</p>

<h2>downloadedPathForURL</h2>

<p><code>- (NSString*) downloadedPathForURL: (NSURL*)url</code></p>

<p>Return the path where the given url was downloaded to.</p>

<p>If the given url has not been downloaded yet, or was never requested to be downloaded, then it should return nil.</p>

<h1>Objectives</h1>

<p>Demonstrate that:</p>

<ul>
<li>You can write a program that satisfies the API methods and described behavior.</li>
<li>You can write code that is well factored, and easy to understand.</li>
<li>You can clearly communicate questions (if any arise) regarding this specification.</li>
</ul>


<h1>Deliverable</h1>

<ul>
<li>Zipped Xcode project directory or a link to github repo that contains the Xcode project.  It can be either an iOS or MacOS project.</li>
</ul>


<h1>Rules</h1>

<ul>
<li>You can use any available resource you can find on the Internet &mdash; eg, Stack Overflow, API docs, etc.</li>
<li>You may not ask questions related to the problem on Stack Overflow, IRC, etc.  (eg, the Internet is &ldquo;read-only&rdquo;)</li>
<li>You cannot use any 3rd party libraries or products, you can only use classes and API&rsquo;s in the standard iOS/Cocoa Objective-C runtime.  If in doubt, just ask.</li>
<li>You are welcome to go above and beyond the call of duty in any way that you see fit, however with the constraint that you must provide the above methods with signatures exactly matching with the specification.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to downgrade Android Studio]]></title>
    <link href="http://tleyden.github.io/blog/2013/12/19/how-to-downgrade-android-studio/"/>
    <updated>2013-12-19T17:01:00-08:00</updated>
    <id>http://tleyden.github.io/blog/2013/12/19/how-to-downgrade-android-studio</id>
    <content type="html"><![CDATA[<p>I just tried to update to Android Studio 0.4, however was stung by <a href="https://code.google.com/p/android/issues/detail?id=61573#c14">Issue 61573: Gradle duplicate file exception when package apk file with jar dependencies that contains resources.</a></p>

<p>The good news is that it&rsquo;s very easy to downgrade!  Thank Google, because there is nothing more annoying than not being able to back out of an upgrade gone bad.</p>

<p>Here&rsquo;s how I did it on OSX Mavericks:</p>

<ul>
<li><p>Download 0.3.7 from <a href="http://tools.android.com/download/studio/canary/0-3-7">http://tools.android.com/download/studio/canary/0-3-7</a></p></li>
<li><p>Unzip it by double clicking it.</p></li>
<li><p>In a command line, run the following:</p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mv /Applications/Android\ Studio.app /tmp/
</span><span class='line'>$ mv ~/Downloads/Android\ Studio.app /Applications/
</span><span class='line'>$ cp -R /tmp/Android\ Studio.app/sdk /Applications/Android\ Studio.app/</span></code></pre></td></tr></table></div></figure>


<p>The last step is necessary because the dowloaded 0.3.7 Android Studio will not have an SDK directory.  (Note: at this point you can also use <code>mv</code> instead of <code>cp</code> if you don&rsquo;t want to use the extra disk space)</p>
]]></content>
  </entry>
  
</feed>
