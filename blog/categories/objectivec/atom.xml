<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: objectivec | Seven Story Rabbit Hole]]></title>
  <link href="http://tleyden.github.io/blog/categories/objectivec/atom.xml" rel="self"/>
  <link href="http://tleyden.github.io/"/>
  <updated>2014-01-31T10:57:58-08:00</updated>
  <id>http://tleyden.github.io/</id>
  <author>
    <name><![CDATA[Traun Leyden]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Objective C coding interview challenge: URLPuller]]></title>
    <link href="http://tleyden.github.io/blog/2014/01/13/objective-c-coding-interview-challenge-urlpuller/"/>
    <updated>2014-01-13T11:45:00-08:00</updated>
    <id>http://tleyden.github.io/blog/2014/01/13/objective-c-coding-interview-challenge-urlpuller</id>
    <content type="html"><![CDATA[<h1>Programming Challenge</h1>

<p>The goal is to create a UrlPuller Objective-C class which takes an array of NSURL&rsquo;s that point to PNG images and downloads them asynchronously and writes the contents of each URL to a file.</p>

<p>It should do some basic error handling, which is described below.</p>

<p>The UrlPuller class should have the following instance methods:</p>

<ul>
<li><code>- (bool) downloadUrlsAsync: (NSArray*)urls</code></li>
<li><code>- (void) waitUntilAllDownloadsFinish</code></li>
<li><code>- (NSString*) downloadedPathForURL: (NSURL*)url</code></li>
</ul>


<p>Here are the detailed descriptions of each method:</p>

<h2><code>- (bool) downloadUrlsAsync: (NSArray*)urls</code></h2>

<p>The urls array will contain an array of NSURL&rsquo;s, each of which points to a PNG image on the web.</p>

<p>As long as there is not a download in progress, this will kick off the URLPuller to asynchronously download the PNG image data from each of the given URLs and save the PNG data to a file.  This method should true in this case, and return immediately.</p>

<p>If there is still a download in progress from a previous call to downloadUrlsAsync, then this method will return false immediately and do nothing.</p>

<p>The downloaded files can be stored in any directory, where the filename is {sha1 hash of url}.png</p>

<p>Downloads should happen concurrently, however it should also be &ldquo;nice&rdquo; and not completely exhaust system resources if it is called with a list of 10K URL&rsquo;s.</p>

<p>Retry behavior: if any of the downloads fail in a way that could be transient, it should wait 10 seconds and retry that URL. The delay doubles after each failure.  After 3 attempts, it gives up on that URL.</p>

<h2><code>- (void) waitUntilAllDownloadsFinish</code></h2>

<p>Block until all of the URLs have been downloaded.</p>

<p>If this is called while there is no download in progress, it should return immediately.  Otherwise, it should block until all the downloads have finished or fail after 3 attempts.</p>

<h2><code>- (NSString*) downloadedPathForURL: (NSURL*)url</code></h2>

<p>If this is called but downloadUrlsAsync was never previously called on this instance, it should return nil.</p>

<p>If a download is in progress, it should wait until all downloads have finished (by calling waitUntilAllDownloadsFinish), and then return the downloaded path for the given url.</p>

<p>If a download is not in progress, but one has completed previously, it should return the downloaded path for the given url in the last previously completed download.</p>

<h1>Expectations/Requirements</h1>

<ul>
<li>Write a program that satisfies the API methods and described behavior.</li>
<li>The code should be easy to read and understand.</li>
<li>An instance of the URLPuller class would only be accessed by a single thread.</li>
<li>You are not required to write any unit tests.</li>
<li>URL downloads should happen concurrently, but it should be &ldquo;nice&rdquo; in terms of not exhausting system resources.</li>
</ul>


<h1>Rules</h1>

<ul>
<li>You can use any available resource you can find on the Internet &mdash; eg, Stack Overflow, API docs, etc.</li>
<li>You may not ask questions related to the problem on Stack Overflow, IRC, etc.  (eg, the Internet is &ldquo;read-only&rdquo;)</li>
<li>You cannot use any 3rd party libraries or products, you can only use classes and API&rsquo;s in the standard iOS/Cocoa Objective-C runtime</li>
<li>It should be possible to run this project via XCode (it can be an OSX command line app, or an iOS app, whatever is convenient)</li>
</ul>

]]></content>
  </entry>
  
</feed>
