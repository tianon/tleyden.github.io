<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: emacs | Seven Story Rabbit Hole]]></title>
  <link href="http://tleyden.github.io/blog/categories/emacs/atom.xml" rel="self"/>
  <link href="http://tleyden.github.io/"/>
  <updated>2014-05-23T11:30:04-07:00</updated>
  <id>http://tleyden.github.io/</id>
  <author>
    <name><![CDATA[Traun Leyden]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Configure Emacs as a Go editor from scratch]]></title>
    <link href="http://tleyden.github.io/blog/2014/05/22/configure-emacs-as-a-go-editor-from-scratch/"/>
    <updated>2014-05-22T16:46:00-07:00</updated>
    <id>http://tleyden.github.io/blog/2014/05/22/configure-emacs-as-a-go-editor-from-scratch</id>
    <content type="html"><![CDATA[<p>This explains the steps to get a productive Emacs environment for Go programming on OSX, starting from scratch.</p>

<h2>Install Emacs</h2>

<p>I recommend using the emacs from <a href="http://emacsformacosx.com">emacsformacosx.com</a>.</p>

<p>It has a GUI installer so I won&rsquo;t say much more about it.</p>

<h2>Install Go</h2>

<ul>
<li>At the time of writing, I installed <a href="https://storage.googleapis.com/golang/go1.2.2.darwin-amd64-osx10.8.pkg">https://storage.googleapis.com/golang/go1.2.2.darwin-amd64-osx10.8.pkg</a></li>
<li>After installing the package, you&rsquo;ll want to define the following environment variables in your <code>~/.bash_profile</code>:</li>
</ul>


<p><code>
export PATH=$PATH:/usr/local/go/bin
export GOPATH=~/Development/gocode
</code></p>

<h2>Configure go-mode</h2>

<p>Go-mode is an Emacs major mode for editing Go code.  An absolute must for anyone writing Go w/ Emacs.</p>

<p>The following is a brief summary of <a href="http://dominik.honnef.co/posts/2013/03/writing_go_in_emacs/">Dominik Honnef&rsquo;s instructions</a></p>

<ul>
<li><code>mkdir -p ~/Misc/emacs &amp;&amp; cd ~/Misc/emacs</code></li>
<li><code>git clone git@github.com:dominikh/go-mode.el.git</code></li>
<li>From within Emacs, run <code>M-x update-file-autoloads</code>, point it at the <strong>go-mode.el</strong> file in the cloned directory.</li>
<li>Emacs will prompt you for a result file, and you should enter <strong>go-mode-load.el</strong></li>
<li>Add these two lines to your ~/.emacs</li>
</ul>


<p><code>
(add-to-list 'load-path "~/Misc/emacs/go-mode.el/")
(require 'go-mode-load)
</code></p>

<p>Restart Emacs and open a .go file, you should see the mode as &ldquo;Go&rdquo; rather than &ldquo;Fundamental&rdquo;.</p>

<h2>Update Emacs config for <code>godoc</code></h2>

<p>It&rsquo;s really useful to be able to able to pull up 3rd party or standard library docs from within Emacs using the <code>godoc</code> tool.</p>

<p><em>Unfortunately, it was necessary to duplicate the $PATH and $GOPATH environment variables in the .emacs file, so that the GUI Emacs app can see it.  If you know of a better way, please leave a comment.</em></p>

<p><strong>NOTE</strong>: you will need to modify the snippet below to reflect the $PATH and $GOPATH variables, don&rsquo;t just blindly copy and paste these.</p>

<ul>
<li>Add your $PATH and $GOPATH to your ~/.emacs</li>
</ul>


<p><code>
(setenv "PATH" "/Users/tleyden/.rbenv/shims:/Users/tleyden/.rbenv/shims:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/local/go/bin")
(setenv "GOPATH" "/Users/tleyden/Development/gocode")
</code></p>

<p>After doing this step, you should be able to run <code>M-x godoc</code> and it should be able to autocomplete paths of packages.  (of course, you may want to <code>go get</code> some packages first if you don&rsquo;t have any)</p>

<h2>Automatically call gofmt on save</h2>

<p><code>gofmt</code> reformats code into the One True Go Style Coding Standard.  You&rsquo;ll want to call it every time you save a file.</p>

<p>Add these to your ~/.emacs:</p>

<p><code>
(setq exec-path (cons "/usr/local/go/bin" exec-path))
(add-to-list 'exec-path "/Users/tleyden/Development/gocode/bin")
(add-hook 'before-save-hook 'gofmt-before-save)
</code></p>

<p>After this step, whenever you save a Go file, it will automatically reformat the file with <code>gofmt</code>.</p>

<h2>Godef</h2>

<p>Godef is essential: it lets you quickly jump around the code, as you might be used to with a full featured IDE.</p>

<p>From what I can tell, installing <a href="https://github.com/dominikh/go-mode.el">go-mode</a> seems to automatically install godef.</p>

<p>To verify that godef is indeed installed:</p>

<ul>
<li>Putting the cursor over a method name</li>
<li>Try doing <code>M-x godef-jump</code> to jump into the method, and <code>M-*</code> to go back.</li>
</ul>


<p>In order to add godef key bindings, add these to your ~/.emacs:</p>

<p><code>
(defun my-go-mode-hook ()
  ; Call Gofmt before saving                                                    
  (add-hook 'before-save-hook 'gofmt-before-save)
  ; Godef jump key binding                                                      
  (local-set-key (kbd "M-.") 'godef-jump))
(add-hook 'go-mode-hook 'my-go-mode-hook)
</code></p>

<p>and remove your previous call to <code>(add-hook 'before-save-hook 'gofmt-before-save)</code> since it&rsquo;s now redundant</p>

<p>Now you can jump into code with <code>M-.</code> and jump back with <code>M-*</code></p>

<h2>Autocomplete</h2>

<p>The following is a brief summary of the <a href="http://cx4a.org/software/auto-complete/manual.html#Installation">emacs autocomplete manual</a></p>

<ul>
<li>Download and extract <a href="http://cx4a.org/pub/auto-complete/auto-complete-1.3.1.tar.bz2">http://cx4a.org/pub/auto-complete/auto-complete-1.3.1.tar.bz2</a></li>
<li>Cd into extracted dir and run <code>emacs -batch -l etc/install.el</code></li>
<li>It will tell you to add the following to your ~/.emacs:</li>
</ul>


<p><code>
(add-to-list 'load-path "/Users/tleyden/.emacs.d/")
(require 'auto-complete-config)
(add-to-list 'ac-dictionary-directories "/Users/tleyden/.emacs.d//ac-dict")
(ac-config-default)
</code></p>

<p>To see any effect, we need to install gocode in the next step.</p>

<h2>Gocode: Go aware Autocomplete</h2>

<p>The following is a brief summary of the <a href="https://github.com/nsf/gocode">gocode README</a></p>

<ul>
<li><code>go get -u -v github.com/nsf/gocode</code></li>
<li><code>cp /Users/tleyden/Development/gocode/src/github.com/nsf/gocode/emacs/go-autocomplete.el ~/.emacs.d/</code></li>
<li>Add the following to your ~/.emacs</li>
</ul>


<p><code>
(require 'go-autocomplete)
(require 'auto-complete-config)
</code></p>

<p>At this point, after you restart emacs, when you start typing something, you should see a popup menu with choices, like <a href="http://tleyden-misc.s3.amazonaws.com/blog_images/emacs_autocomplete.png">this screenshot</a>.</p>

<h2>Customize compile command to run <code>go build</code></h2>

<p>It&rsquo;s convenient to be able to run <code>M-x compile</code> to compile and test your Go code from within emacs.</p>

<p>To do that, edit your ~/.emacs and replace your go-mode hook with:</p>

<p>```
(defun my-go-mode-hook ()
  ; Call Gofmt before saving
  (add-hook &lsquo;before-save-hook 'gofmt-before-save)
  ; Customize compile command to run go build
  (if (not (string-match &ldquo;go&rdquo; compile-command))</p>

<pre><code>  (set (make-local-variable 'compile-command)
       "go build -v &amp;&amp; go test -v &amp;&amp; go vet"))
</code></pre>

<p>  ; Godef jump key binding
  (local-set-key (kbd &ldquo;M-.&rdquo;) &lsquo;godef-jump))
(add-hook 'go-mode-hook 'my-go-mode-hook)
```</p>

<p>After that, restart emacs, and when you type <code>M-x compile</code>, it should try to execute <code>go build -v &amp;&amp; go test -v &amp;&amp; go vet</code> instead of the default behavior.</p>

<p><strong>Power tip</strong>: you can jump straight to each compile error by running <code>Ctl-x `</code>.  Each time you do it, it will jump to the next error.</p>

<h2>Is this too easy for you?</h2>

<p>If you&rsquo;re yawning and you already know all this stuff, or you&rsquo;re ready to take it to the next level, check out <a href="http://www.youtube.com/watch?v=5wipWZKvNSo">5 minutes of go in emacs</a></p>

<h2>To be continued ..</h2>

<p>There&rsquo;s actually a bunch of other stuff I still need to add here (like Go Oracle and that thing that automatically manages go imports).  Check back in a while.</p>

<p>Thanks <a href="https://twitter.com/dlsspy">@dlsspy</a> for taking the time to teach me the Emacs wrestling techniques needed to get this far.</p>
]]></content>
  </entry>
  
</feed>
