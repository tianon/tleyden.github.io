<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: sync-gateway, | Seven Story Rabbit Hole]]></title>
  <link href="http://tleyden.github.io/blog/categories/sync-gateway/atom.xml" rel="self"/>
  <link href="http://tleyden.github.io/"/>
  <updated>2015-01-23T16:40:43-08:00</updated>
  <id>http://tleyden.github.io/</id>
  <author>
    <name><![CDATA[Traun Leyden]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Running a Walrus-backed Sync Gateway on AWS]]></title>
    <link href="http://tleyden.github.io/blog/2015/01/23/running-a-walrus-backed-sync-gateway-on-aws/"/>
    <updated>2015-01-23T09:30:00-08:00</updated>
    <id>http://tleyden.github.io/blog/2015/01/23/running-a-walrus-backed-sync-gateway-on-aws</id>
    <content type="html"><![CDATA[<p>Follow the steps below to create a Sync Gateway instance running under AWS with the following architecture:</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/sync_gw_walrus_aws.png" alt="architecture diagram" /></p>

<p>It will be using the <a href="https://github.com/couchbaselabs/walrus">Walrus</a> in-memory database, and so it is only useful for light testing.  Walrus does have the abiity to snapshot its memory contents to a file, so your data can persist across restarts.</p>

<p><strong>Warning: don&rsquo;t run this in production!</strong>  If you want something that is closer to production ready, check out <a href="http://tleyden.github.io/blog/2014/12/15/running-a-sync-gateway-cluster-under-coreos-on-aws/">Running a Sync Gateway Cluster Under CoreOS on AWS</a> instead.</p>

<h2>Launch EC2 instance</h2>

<p>Go to the <a href="https://console.aws.amazon.com/cloudformation/home?region=us-east-1#cstack=sn%7ECouchbase-CoreOS%7Cturl%7Ehttp://tleyden-misc.s3.amazonaws.com/couchbase-coreos/sync_gateway.template">Cloudformation Wizard</a></p>

<p>Recommended values:</p>

<ul>
<li><strong>ClusterSize</strong>: 1 node</li>
<li><strong>Discovery URL</strong>:  as it says, you need to grab a new token from <a href="https://discovery.etcd.io/new">https://discovery.etcd.io/new</a> and paste it in the box.</li>
<li><strong>KeyPair</strong>: the name of the AWS keypair you want to use.</li>
</ul>


<p>For the keypair that you use, your local ssh client will need to have the private key side of that keypair.</p>

<h3>Wait until instances are up</h3>

<p>Hit the &ldquo;reload&rdquo; button until it goes to the CREATE_COMPLETE state.</p>

<p><img src="http://tleyden-misc.s3.amazonaws.com/blog_images/cloud-formation-create-complete.png" alt="screenshot" /></p>

<h2>Find ip of instance</h2>

<p>Go to the AWS console under the &ldquo;EC2 instances&rdquo; section and find the public ip of one of your newly launched CoreOS instances.</p>

<p>Choose any one of them (it doesn&rsquo;t matter which), and look for the <strong>Public IP</strong>.  Copy that value onto your clipboard.</p>

<h3>SSH into instance</h3>

<p>ssh into it as the <strong>core</strong> user with the cert provided in the previous step:</p>

<p><code>
$ ssh -A core@ec2-54-83-80-161.compute-1.amazonaws.com
</code></p>

<h2>Create a volume directory</h2>

<p>After you ssh into your instance, create a volume directory so that the data persists across different container instances.</p>

<p><code>
$ sudo mkdir -p /opt/sync_gateway/data
$ sudo chown -R core:core /opt/sync_gateway/data
</code></p>

<h2>Launch Sync Gateway</h2>

<p><code>
$ SYNC_GW_CONFIG=https://gist.githubusercontent.com/tleyden/368f01218baf4e760267/raw/a65be036bc3855d5ab4e73b849f4caa1dc7d390f/config.json
$ sudo docker run --name sync_gw --net=host -v /opt/sync_gateway/data:/opt/sync_gateway/data tleyden5iwx/sync-gateway-coreos sync-gw-start -c master -g $SYNC_GW_CONFIG
</code></p>

<h2>View logs</h2>

<p><strong>Find container id</strong></p>

<p>```
$ sudo docker ps</p>

<p>CONTAINER ID        IMAGE                                           COMMAND                CREATED             STATUS              PORTS               NAMES
2a55905c6f32        tleyden5iwx/sync-gateway-coreos:latest          &ldquo;sync-gw-start -c ma   6 hours ago         Up 6 hours                              sync_gw
```</p>

<p><strong>Tail logs</strong></p>

<p><code>
$ sudo docker logs --follow 2a55905c6f32
</code></p>

<h2>Verify Sync Gateway</h2>

<p>Assuming your public ip is <code>54.81.228.221</code>, paste <code>54.81.228.221:4984</code> into your web browser and you should see:</p>

<p>```
{</p>

<pre><code>"couchdb":"Welcome",
"vendor":{
    "name":"Couchbase Sync Gateway",
    "version":1
},
"version":"Couchbase Sync Gateway/master(6356065)"
</code></pre>

<p>}
```</p>

<p>To make sure the database was configured correctly, change the url to <code>54.81.228.221:4984/db</code>, and you should see:</p>

<p>```
{</p>

<pre><code>"db_name":"db",
.. etc ..
</code></pre>

<p>}
```</p>

<h2>Restart Sync Gateway with new config</h2>

<p><strong>Stop and remove existing container</strong></p>

<p><code>
$ sudo docker stop 2a55905c6f32 &amp;&amp; sudo docker rm 2a55905c6f32
</code></p>

<p><strong>Start with new config</strong></p>

<p>You can take this <a href="https://gist.githubusercontent.com/tleyden/368f01218baf4e760267/raw/a65be036bc3855d5ab4e73b849f4caa1dc7d390f/config.json">sample config</a> and customize it to your needs, and then upload it somewhere on the web.</p>

<p>Make sure you keep the <code>server</code> field as <code>"walrus:data"</code>, since that tells Sync Gateway to use walrus and to store the data in the <code>/opt/sync_gateway/data</code> directory.</p>

<p><strong>Start container with new config</strong></p>

<p><code>
$ SYNC_GW_CONFIG=https://yourserver.com/yourconfig.json
$ sudo docker run --name sync_gw --net=host -v /opt/sync_gateway/data:/opt/sync_gateway/data tleyden5iwx/sync-gateway-coreos sync-gw-start -c master -g $SYNC_GW_CONFIG
</code></p>

<p>Congratulations!  You now have a Sync Gateway running.</p>
]]></content>
  </entry>
  
</feed>
